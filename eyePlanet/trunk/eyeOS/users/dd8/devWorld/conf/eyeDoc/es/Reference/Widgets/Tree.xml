<?xml version="1.0" encoding="UTF-8"?>
<!-- This document is licensed under the Creative Commons 3.0 BY-NC-ND License
	 available at http://creativecommons.org/licenses/by-nc-nd/3.0/. -->
<info>
	<type>Widget</type>
	<general>
		<name>Tree</name>
		<tags>
			<tag>widget</tag>
			<tag>hyerarchy</tag>
		</tags>
		<shortDesc>Allows to display elements hierarchically.</shortDesc>
	</general>
	<name>Tree</name>
	<description>The Tree widget allows to display a list of elements, such as a directory structure in a hierarchical form.</description>
	<image>El widget Tree mostrando los directorios del usuario root.</image>
	<generic_keys>
		<key>
			<name>name</name>
			<desc>Nombre unívoco dado al widget.</desc>
		</key>
		<key>
			<name>father</name>
			<desc>Nombre de su elemento padre dentro del cual se crea.</desc>
		</key>
		<key>
			<name>horiz</name>
			<desc>Especifica si la coordenada horizontal debe tomarse desde el borde izquierdo (0) o derecho (1) de su contenedor. El valor por defecto es 0 (borde izquierdo).</desc>
		</key>
		<key>
			<name>vert</name>
			<desc>Especifica si la coordenada vertical debe tomarse desde el borde superior (0) o inferior (1) de su contenedor. El valor por defecto es 0 (borde superior).</desc> 
		</key>
		<key>
			<name>x</name>
			<desc>Especifica la coordenada horizontal dentro de su contenedor, en píxeles. El valor por defecto son 10 píxeles.</desc> 
		</key>
		<key>
			<name>y</name>
			<desc>Especifica la coordenada vertical dentro de su contenedor, en píxeles. El valor por defecto son 10 píxeles.</desc> 
		</key>
		<key>
			<name>cent</name>
			<desc>
			Especifica cómo debe centrarse el widget. Los valores posibles son:
			 0: sin centrar. Es el valor por defecto.
			 1: centrar horizontal y verticalmente.
			 2: centrar horizontalmente.
			 3: centrar verticalmente.
			 4: especifica como coordenadas horizontales y verticales del widget el centro del contenedor.
			 5: especifica como coordenada horizontal del widget el centro del contenedor.
			 6: especifica como coordenada vertical del widget el centro del contenedor.

			Ten en cuenta la diferencia que hay entre las opciones 1-3 y 4-6. Las opciones 1-3 calculan el tamaño del widget para asegurarse que su punto central coincide con el centro de su contenedor, mientras que las opciones 4-6 sólo posicionan el widget con las coordenadas del punto central del contenedor, haciendo que el widget pueda verse desplazado del centro.
			</desc>
		</key>
		<key>
			<name>width</name>
			<desc>Especifica la anchura del widget, en píxeles. El valor por defecto son 200 píxeles.</desc>
		</key>
		<key>
			<name>height</name>
			<desc>Especifica la altura del widget, en píxeles. El valor por defecto son 200 píxeles.</desc>
		</key> 
	</generic_keys>
	<specific_keys>
		<key>
			<name>clickTree</name>
			<desc>Specifies whether or not a signal is sent to the system when an element is clicked. The default value of 0 disables this option, while a value of 1 enables it.</desc>
		</key>
		<key>
			<name>signal</name>
			<desc>Name of the signal sent to the system when an element of the Tree is clicked.</desc>
		</key>
	</specific_keys>
	<methods>
		<method>
			<syntax>void addEvent(string $eventName, string $eventFunc[, string $args = ''])</syntax>
			<desc>Hace que el sistema ejecute un código JavaScript dado cada vez que se produzca un evento en este widget.</desc>
			<arguments>
				<arg>
					<name>eventName</name>
					<desc>Nombre del evento JS. Ejemplos: onchange, onmouseup.</desc>
				</arg>
				<arg>
					<name>eventFunc</name>
					<desc>Código JavaScript que se ejecutará cada vez que se dispare el evento. El código se ejecutará dentro de una función para que puedan recibirse argumentos.</desc>
				</arg>
				<arg>
					<name>args</name>
					<desc>Argumentos pasados a la función del evento.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>addFriend(object $friend)</syntax>
			<desc>Adds to the friend widgets list of the Button the given widget.</desc>
			<arguments>
				<arg>
					<name>friend</name>
					<desc>Widget to be added as a friend.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>addItem(string $listname, string $itemName, string $text)</syntax>
			<desc>Adds a new element to the Tree.</desc>
			<arguments>
				<arg>
					<name>listname</name>
					<desc>Name of the list in which to place the element. In case the element is at the top level, the name of the Tree must be specified as the father list.</desc>
				</arg>
				<arg>
					<name>itemName</name>
					<desc>Name of the element.</desc>
				</arg>
				<arg>
					<name>text</name>
					<desc>Displayed text of the element.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>addSubList(string $itemName, string $listname)</syntax>
			<desc>Creates a new list from an existing element. As a result, new elements can be placed inside the new list.</desc>
			<arguments>
				<arg>
					<name>itemName</name>
					<desc>Name of the element from to make a list.</desc>
				</arg>
				<arg>
					<name>listname</name>
					<desc>Name of the list.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>void hide()</syntax>
			<desc>Hace el widget invisible.</desc>
		</method>
		<method>
			<syntax>processList()</syntax>
			<desc>Transforms the added elements as a Tree. This function must be called after adding all the elements.</desc>		
		</method>
		<method>
			<syntax>void remove()</syntax>
			<desc>Elimina el widget, y con él todos los widgets en su interior.</desc>
		</method>
		<method>
			<syntax>void setCss(array $params)</syntax>
			<desc>Aplica atributos CSS al widget.</desc>
			<arguments>
				<arg>
					<name>params</name>
					<desc>Especifica, en forma de un array asociativo, los atributos a aplicar. La clave del elemento del array corresponde a la propiedad, mientras que el valor representa al valor de la propiedad. Tanto las claves como los valores deben ser válidos en la sintaxis de CSS.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>void setHeight(int $height)</syntax>
			<desc>Cambia la altura de un widget.</desc>
			<arguments>
				<arg>
					<name>height</name>
					<desc>Nueva altura, expresada en píxeles.</desc>
				</arg>
			</arguments>
		</method>
		<method>
		 	<syntax>void setWidth(int $width)</syntax>
			<desc>Cambia la anchura del widget.</desc>
			<arguments>
				<arg>
					<name>width</name>
					<desc>Nueva anchura del widget, en píxeles.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>void setX(int $x)</syntax>
			<desc>Cambia la posición horizontal del widget.</desc>
			<arguments>
				<arg>
					<name>x</name>
					<desc>Nueva coordenada horizontal.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>void setY(int $y)</syntax>
			<desc>Cambia la posición vertical del widget.</desc>
			<arguments>
				<arg>
					<name>y</name>
					<desc>Nueva posición vertical.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>show(int $noserialize = 0)</syntax>
			<desc>Draws the widget in the screen, allowing to serialize the instance in the session.</desc>
			<arguments>
				<arg>
					<name>noserialize</name>
					<desc>Specifies whether the Tree must be serialized or not. The default value of 0serializes it, while a value of 1 does not.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>void unhide()</syntax>
			<desc>Hace el widget visible.</desc>
		</method>
	</methods>
</info>
