<?xml version="1.0" encoding="UTF-8"?>
<!-- This document is licensed under the Creative Commons 3.0 BY-NC-ND License
	 available at http://creativecommons.org/licenses/by-nc-nd/3.0/. -->
<info>
	<type>Widget</type>
	<general>
		<name>Box</name>
		<tags>
			<tag>widget</tag>
			<tag>container</tag>
		</tags>
		<shortDesc>Un widget contenedor con título.</shortDesc>
	</general>
	<name>Box</name>
	<description>Box (del ingés, 'caja') es un contenedor que consiste en un título descriptivo sobre su contenido y un espacio en blanco más abajo que se usa normalmente para colocar otros elementos, normalmente las acciones de una aplicación. Desde eyeOS 1.6 este widget puede serializarse directamente y ser accedido desde otras partes de la aplicación.</description>
	<image>El widget Box con el título 'Feeds'. En este caso actúa como contenedor y tiene un widget Tree en su interior.</image>
	<generic_keys>
		<key>
			<name>name</name>
			<desc>Nombre unívoco dado al widget.</desc>
		</key>
		<key>
			<name>father</name>
			<desc>Nombre de su elemento padre dentro del cual se crea.</desc>
		</key>
		<key>
			<name>horiz</name>
			<desc>Especifica si la coordenada horizontal debe tomarse desde el borde izquierdo (0) o derecho (1) de su contenedor. El valor por defecto es 0 (borde izquierdo).</desc>
		</key>
		<key>
			<name>vert</name>
			<desc>Especifica si la coordenada vertical debe tomarse desde el borde superior (0) o inferior (1) de su contenedor. El valor por defecto es 0 (borde superior).</desc> 
		</key>
		<key>
			<name>x</name>
			<desc>Especifica la coordenada horizontal dentro de su contenedor, en píxeles. El valor por defecto son 10 píxeles.</desc> 
		</key>
		<key>
			<name>y</name>
			<desc>Especifica la coordenada vertical dentro de su contenedor, en píxeles. El valor por defecto son 10 píxeles.</desc> 
		</key>
		<key>
			<name>cent</name>
			<desc>
			Especifica cómo debe centrarse el widget. Los valores posibles son:
			 0: sin centrar. Es el valor por defecto.
			 1: centrar horizontal y verticalmente.
			 2: centrar horizontalmente.
			 3: centrar verticalmente.
			 4: especifica como coordenadas horizontales y verticales del widget el centro del contenedor.
			 5: especifica como coordenada horizontal del widget el centro del contenedor.
			 6: especifica como coordenada vertical del widget el centro del contenedor.

			Ten en cuenta la diferencia que hay entre las opciones 1-3 y 4-6. Las opciones 1-3 calculan el tamaño del widget para asegurarse que su punto central coincide con el centro de su contenedor, mientras que las opciones 4-6 sólo posicionan el widget con las coordenadas del punto central del contenedor, haciendo que el widget pueda verse desplazado del centro.
			</desc>
		</key>
		<key>
			<name>visible</name>
			<desc>Especifica la visibilidad del widget. Los valores posibles son 0 (invisible) o 1 (visible). El valor por defecto es 1.</desc>
		</key>
		<key>
			<name>width</name>
			<desc>Especifica la anchura del widget, en píxeles. El valor por defecto son 200 píxeles.</desc>
		</key>
		<key>
			<name>height</name>
			<desc>Especifica la altura del widget, en píxeles. El valor por defecto son 200 píxeles.</desc>
		</key> 
	</generic_keys>
	<specific_keys>
		<key>
			<name>title</name>
			<desc>Título que se le da al widget.</desc>
		</key>
		<key>
			<name>titleCSS</name>
			<desc>Nombre de la clase CSS que se aplica al título del widget. El valor por defecto es la clase 'eyeBoxText'.</desc>
		</key>
	</specific_keys>
	<methods>
		<method>
			<syntax>void addEvent(string $eventName, string $eventFunc[, string $args = ''])</syntax>
			<desc>Hace que el sistema ejecute un código JavaScript dado cada vez que se produzca un evento en este widget.</desc>
			<arguments>
				<arg>
					<name>eventName</name>
					<desc>Nombre del evento JS. Ejemplos: onchange, onmouseup.</desc>
				</arg>
				<arg>
					<name>eventFunc</name>
					<desc>Código JavaScript que se ejecutará cada vez que se dispare el evento. El código se ejecutará dentro de una función para que puedan recibirse argumentos.</desc>
				</arg>
				<arg>
					<name>args</name>
					<desc>Argumentos pasados a la función del evento.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>void hide()</syntax>
			<desc>Hace el widget invisible.</desc>
		</method>
		<method>
			<syntax>void remove()</syntax>
			<desc>Elimina el widget, y con él todos los widgets en su interior.</desc>
		</method>
		<method>
			<syntax>void setCss(array $params)</syntax>
			<desc>Aplica atributos CSS al widget.</desc>
			<arguments>
				<arg>
					<name>params</name>
					<desc>Especifica, en forma de un array asociativo, los atributos a aplicar. La clave del elemento del array corresponde a la propiedad, mientras que el valor representa al valor de la propiedad. Tanto las claves como los valores deben ser válidos en la sintaxis de CSS.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>void setHeight(int $height)</syntax>
			<desc>Cambia la altura de un widget.</desc>
			<arguments>
				<arg>
					<name>height</name>
					<desc>Nueva altura, expresada en píxeles.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>void setTitle(string $newTitle)</syntax>
			<desc>Cambia el título del widget.</desc>
			<arguments>
				<arg>
					<name>newTitle</name>
					<desc>Nuevo título del widget.</desc>
				</arg>
			</arguments>
		</method>
		<method>
		 	<syntax>void setWidth(int $width)</syntax>
			<desc>Cambia la anchura del widget.</desc>
			<arguments>
				<arg>
					<name>width</name>
					<desc>Nueva anchura del widget, en píxeles.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>void setX(int $x)</syntax>
			<desc>Cambia la posición horizontal del widget.</desc>
			<arguments>
				<arg>
					<name>x</name>
					<desc>Nueva coordenada horizontal.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>void setY(int $y)</syntax>
			<desc>Cambia la posición vertical del widget.</desc>
			<arguments>
				<arg>
					<name>y</name>
					<desc>Nueva posición vertical.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>void show(int $noserialize = 1)</syntax>
			<desc>Dibuja el widget en la pantalla. Este widget puede ser serializado directamente desde la versión 1.6</desc>
			<arguments>
				<arg>
					<name>noserialize</name>
					<desc>Especifica si el widget debe ser serializado o no. El valor por defecto es 1 (no serializado), mientras que el valor de 0 lo serializa.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>void unhide()</syntax>
			<desc>Hace el widget visible.</desc>
		</method>
	</methods>
	<changelog>
		<trace>
			<version>1.6</version>
			<desc>El método show() ahora permite especificar si el widget debe ser serializado o no. También se añade el método setTitle(), que permite cambiar el título.</desc>
		</trace>
	</changelog>
		<examples>
		<ex>
			<type>cómo usar el widget Box</type>
			<desc>	
	//Creamos el widget
	$myBox = new Box(array(
		'name' => 'myBox',
		'father' => 'WND1',
		'x' => 10,
		'y' => 10,
		'width' => 200,
		'height' => 400,
		'title' => 'Probando widget Box'
	));
	$myBox->show();
	//Ahora le cambiamos el título
	$myBox->setTitle('¡Hola, Mundo!');</desc>
		</ex>
		<ex>
			<type>usando el widgetBox como contenedor</type>
			<desc>
	$myBox = new Box(array(
		'name' => 'myBox',
		'father' => 'WND1',
		'x' => 10,
		'y' => 10,
		'width' => 200,
		'height' => 400,
		'title' => 'Probando widget Box'
	));
	$myBox->show();
	
	//Creamos el texto dentro de la caja
	$myLabel = new Label(array(
		'name' => 'myLabel',
		'father' => 'myBox',
		'x' => 5,
		'y' => 35,
		'text' => 'Este texto está dentro del widget!'
	));
	$myLabel->show();</desc>
		</ex>
	</examples>
</info>
