<?xml version="1.0" encoding="UTF-8"?>
<!-- This document is licensed under the Creative Commons 3.0 BY-NC-ND License
	 available at http://creativecommons.org/licenses/by-nc-nd/3.0/. -->
<info>
	<type>Function</type>
	<general>
		<name>service</name>
		<tags>
			<tag>function</tag>
			<tag>kernel</tag>
			<tag>service</tag>
		</tags>
		<shortDesc>Allows to call a service function.</shortDesc>		
	</general>	
	<changelog>
		<trace>
			<version>1.0</version>
			<desc>Created.</desc>
		</trace>
	</changelog>
	<definition>
		<functionName>service</functionName>
		<syntax>mixed service(string $servicename, string $servicefunction=null [, array $params=null, int $noListen=0])</syntax>
		<desc>Calls the specified function of a service. The specified service must be in the system's directory.</desc>
		<params>
			<type>required</type>
			<name>servicename</name>
			<desc>Name of the service to execute. This function will look for a folder with this name in the services directory.</desc>
		</params>
		<params>
			<type>required</type>
			<name>servicefunction</name>
			<desc>Name of the function to call.</desc>
		</params>
		<params>
			<type>required</type>
			<name>params</name>
			<desc>Array containing the arguments that will be passed to the function. Whether the arguments are expressed as an indexed or associative array depends on the own function's syntax.</desc>
		</params>
		<params>
			<type>required</type>
			<name>noListen</name>
			<desc>If set to 0, searchs for apps listening to this call and executes the function specified by the set listener service calls.</desc>
		</params>
		<return>If the specified service or the service's function given do not exist or can't be executed, returns false. Else, returns the called service function.</return>
		<examples>
			<ex>
				<type>Usage</type>
				<desc>service('eyeX', 'messageBox', array('content' => 'Foo')); //You can use the aliases just to make this line shorter</desc>
			</ex>
		</examples>
	</definition>
</info>