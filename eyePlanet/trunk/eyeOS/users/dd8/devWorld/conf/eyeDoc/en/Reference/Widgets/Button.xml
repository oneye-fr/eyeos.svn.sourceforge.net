<?xml version="1.0" encoding="UTF-8"?>
<!-- This document is licensed under the Creative Commons 3.0 BY-NC-ND License
	 available at http://creativecommons.org/licenses/by-nc-nd/3.0/. -->
<info>
	<type>Widget</type>
	<general>
		<name>Button</name>
		<tags>
			<tag>widget</tag>
			<tag>input</tag>
			<tag>friend</tag>
		</tags>
		<shortDesc>An clickable element that can send signals to the system.</shortDesc>
	</general>
	<name>Button</name>
	<description>The Button widget is an element of the User Interface that lets to trigger an event every time a user clicks on it. Every time a Button is clicked, a signal to the system is sent to execute a certain event function of an application.</description>
	<image>Two buttons, the first one using an image, and the second one without using it.</image>
	<generic_keys>
		<key>
			<name>name</name>
			<desc>Unique name given to the widget.</desc>
		</key>
		<key>
			<name>father</name>
			<desc>Parent element inside of which the widget is created.</desc>
		</key>
		<key>
			<name>horiz</name>
			<desc>Specifies whether its horizontal coordinate must be taken from the left (0) or the right (1) border of its father element. Default value is 0 (left positioning).</desc>
		</key>
		<key>
			<name>vert</name>
			<desc>Specifies whether its vertical coordinate must be taken from the upper (0) or from the bottom (1) border of its father element. Default value is 0 (upper positioning).</desc> 
		</key>
		<key>
			<name>x</name>
			<desc>Specifies the horizontal displacement inside its father element, in pixels. Default value is 10 pixels.</desc> 
		</key>
		<key>
			<name>y</name>
			<desc>Specifies the vertical displacement inside its father element, in pixels. Default value is 10 pixels.</desc> 
		</key>
		<key>
			<name>cent</name>
			<desc>
			Specifies how the widget should be centered. Possible values are:
			 0: no centering. This is the default value.
			 1: center both horizontal and vertically.
			 2: center horizontally.
			 3: center vertically.
			 4: place the widget at the horizontal and vertical center of its container element.
			 5: place the widget at the horizontal center of its container element.
			 6: place the widget at the vertical center of its container element. 

			Please note the difference between options 1-3 and options 4-6. Options 1-3 calculate the size of the widget to ensure that the center of the widget is placed at the central point of its container, while options 4-6 set the central point coordinates as the widget's position, thus making the widget displaced from the central point.
			</desc>
		</key>
		<key>
			<name>visible</name>
			<desc>Sets the widget visibility. Possible values are 0 (hidden) or 1 (visible). Default value is 1.</desc>
		</key>
		<key>
			<name>width</name>
			<desc>Sets the width of the widget, in pixels. Default width is 200 pixels.</desc>
		</key>
		<key>
			<name>height</name>
			<desc>Sets the height of the widget, in pixels. Default height is 200 pixels.</desc>
		</key>
		<key>
			<name>disablemsg</name>
			<desc>Specifies if the Button must send a signal to the system when clicked. The default value of 0 allows it to send a signal, while any other value prevents it.</desc>
		</key>
		<key>
			<name>signal</name>
			<desc>Name of the signal sent to the system every time the Button is clicked. In case this key is not specified, the name of the Button will be used instead.</desc>
		</key>
	</generic_keys>
	<specific_keys>
		<key>
			<name>caption</name>
			<desc>Text displayed inside the Button. In case the caption may have some token, the token key should be used in order to translate the text correctly to the user's language.</desc>
		</key>
		<key>
			<name>tokens</name>
			<desc>Indexed array containing the values of the tokens in the text. Each token in the 'text' key is represented by the '%s' string.</desc>
		</key>
		<key>
			<name>img</name>
			<desc>Path to the image that will be displayed in the Button. The image must be inside the eyeOS system and the must use the extern service.</desc>
		</key>
		<key>
			<name>forceMsg</name>
			<desc>If set to a value different than 0, sets the value of the signal send by the button the given value.</desc>
		</key>
	</specific_keys>
	<methods>
		<method>
			<syntax>addEvent(string $eventName, string $eventFunc[, string $args = ''])</syntax>
			<desc>Makes the system execute a given JavaScript code every time certain event of this widget is triggered.</desc>
			<arguments>
				<arg>
					<name>eventName</name>
					<desc>Name of the JS event. Examples: onchange, onmouseup.</desc>
					</arg>
				<arg>
					<name>eventFunc</name>
					<desc>JavaScript code inside the function of the event.</desc>
				</arg>
				<arg>
					<name>args</name>
					<desc>Arguments passed to the function of the event.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>addFriend(object $friend)</syntax>
			<desc>Adds the given widget to the friends list of the Button. Every time the button sends a signal to the system, it will read the value of its friend widgets and update their value in the server side. If the 'forceMsg' parameter is used, the content of the signal will be the value given to that parameter.</desc>
			<arguments>
				<arg>
					<name>friend</name>
					<desc>Widget to be added as a friend.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>disable()</syntax>
			<desc>Makes the widget unusable.</desc>
		</method>
		<method>
			<syntax>enable()</syntax>
			<desc>Makes the widget usable.</desc>
		</method>
		<method>
			<syntax>focus()</syntax>
			<desc>Sets the focus on this widget.</desc>
		</method>
		<method>
			<syntax>hide()</syntax>
			<desc>Makes the widget invisible.</desc>
		</method>
		<method>
			<syntax>remove()</syntax>
			<desc>Removes this widget, along with its child widgets.</desc>
		</method>
		<method>
			<syntax>setCaption(string $newCaption, array $newTokens=0)</syntax>
			<desc>Changes the caption of the Button to the given text. In case the new caption has some tokens, the tokens must be provided as an array to allow the new caption to be translated to the user's language.</desc>
			<arguments>
				<arg>
					<name>newCaption</name>
					<desc>New text inside the button.</desc>
				</arg>
				<arg>
					<name>newTokens</name>
					<desc>Array containing the tokens of the new caption.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>setCss(array $params)</syntax>
			<desc>Sets CSS atributes to a widget.</desc>
			<arguments>
				<arg>
					<name>params</name>
					<desc>Specifies, in the form of an associative array, the CSS attributes to be applied. Both the key and value of each element must be valid CSS properties and values respectively.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>setHeight(int $height)</syntax>
			<desc>Changes the height of the widget.</desc>
			<arguments>
				<arg>
					<name>height</name>
					<desc>New height, in pixels.</desc>
				</arg>
			</arguments>
		</method>
		<method>
		 	<syntax>setWidth(int $width)</syntax>
			<desc>Changes the width of the widget.</desc>
			<arguments>
				<arg>
					<name>width</name>
					<desc>New width, in pixels.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>setX(int $x)</syntax>
			<desc>Changes the horizontal position of the widget.</desc>
			<arguments>
				<arg>
					<name>x</name>
					<desc>New X coordinate.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>setY(int $y)</syntax>
			<desc>Changes the vertical position of the widget.</desc>
			<arguments>
				<arg>
					<name>y</name>
					<desc>New Y coordinate.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>show(int $noserialize=1)</syntax>
			<desc>Draws the widget in the screen, allowing to serialize the instance in the session.</desc>
			<arguments>
				<arg>
					<name>noserialize</name>
					<desc>Specifies whether the Button must be serialized or not. The default value of 1 does not serialize it, while a value of 0 does.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>unhide()</syntax>
			<desc>Makes the widget visible.</desc>
		</method>
	</methods>
</info>
