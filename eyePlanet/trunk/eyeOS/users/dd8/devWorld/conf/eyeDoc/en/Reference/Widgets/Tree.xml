<?xml version="1.0" encoding="UTF-8"?>
<!-- This document is licensed under the Creative Commons 3.0 BY-NC-ND License
	 available at http://creativecommons.org/licenses/by-nc-nd/3.0/. -->
<info>
	<type>Widget</type>
	<general>
		<name>Tree</name>
		<tags>
			<tag>widget</tag>
			<tag>hyerarchy</tag>
		</tags>
		<shortDesc>Allows to display elements hierarchically.</shortDesc>
	</general>
	<name>Tree</name>
	<description>The Tree widget allows to display a list of elements, such as a directory structure in a hierarchical form.</description>
	<image>A Tree widget displaying the root's directories.</image>
	<generic_keys>
		<key>
			<name>name</name>
			<desc>Unique name given to the widget.</desc>
		</key>
		<key>
			<name>father</name>
			<desc>Parent element inside of which the widget is created.</desc>
		</key>
		<key>
			<name>horiz</name>
			<desc>Specifies whether its horizontal coordinate must be taken from the left (0) or the right (1) border of its father element. Default value is 0 (left positioning).</desc>
		</key>
		<key>
			<name>vert</name>
			<desc>Specifies whether its vertical coordinate must be taken from the upper (0) or from the bottom (1) border of its father element. Default value is 0 (upper positioning).</desc> 
		</key>
		<key>
			<name>x</name>
			<desc>Specifies the horizontal displacement inside its father element, in pixels. Default value is 10 pixels.</desc> 
		</key>
		<key>
			<name>y</name>
			<desc>Specifies the vertical displacement inside its father element, in pixels. Default value is 10 pixels.</desc> 
		</key>
		<key>
			<name>cent</name>
			<desc>Specifies how the widget should be centered. Possible values are:
	 0: no centering. This is the default value.
	 1: center both horizontal and vertically.
	 2: center horizontally.
	 3: center vertically.
	 4: place the widget at the horizontal and vertical center of its container element.
	 5: place the widget at the horizontal center of its container element.
	 6: place the widget at the vertical center of its container element. 

	Please note the difference between options 1-3 and options 4-6. Options 1-3 calculate the size of the widget to ensure that the center of the widget is placed at the central point of its container, while options 4-6 set the central point coordinates as the widget's position, thus making the widget displaced from the central point.</desc>
		</key>
		<key>
			<name>width</name>
			<desc>Sets the width of the widget, in pixels. Default width is 200 pixels.</desc>
		</key>
		<key>
			<name>height</name>
			<desc>Sets the height of the widget, in pixels. Default height is 200 pixels.</desc>
		</key> 
	</generic_keys>
	<specific_keys>
		<key>
			<name>clickTree</name>
			<desc>Specifies whether or not a signal is sent to the system when an element is clicked. The default value of 0 disables this option, while a value of 1 enables it.</desc>
		</key>
		<key>
			<name>signal</name>
			<desc>Name of the signal sent to the system when an element of the Tree is clicked.</desc>
		</key>
	</specific_keys>
	<methods>
		<method>
			<syntax>addEvent(string $eventName, string $eventFunc[, string $args = ''])</syntax>
			<desc>Makes the system execute a given JavaScript code every time certain event of this widget is triggered.</desc>
			<arguments>
				<arg>
					<name>eventName</name>
					<desc>Name of the JS event. Examples: onchange, onmouseup.</desc>
				</arg>
				<arg>
					<name>eventFunc</name>
					<desc>JavaScript code inside the function of the event.</desc>
				</arg>
				<arg>
					<name>args</name>
					<desc>Arguments passed to the function of the event.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>addFriend(object $friend)</syntax>
			<desc>Adds to the friend widgets list of the Button the given widget.</desc>
			<arguments>
				<arg>
					<name>friend</name>
					<desc>Widget to be added as a friend.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>addItem(string $listname, string $itemName, string $text)</syntax>
			<desc>Adds a new element to the Tree.</desc>
			<arguments>
				<arg>
					<name>listname</name>
					<desc>Name of the list in which to place the element. In case the element is at the top level, the name of the Tree must be specified as the father list.</desc>
				</arg>
				<arg>
					<name>itemName</name>
					<desc>Name of the element.</desc>
				</arg>
				<arg>
					<name>text</name>
					<desc>Displayed text of the element.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>addSubList(string $itemName, string $listname)</syntax>
			<desc>Creates a new list from an existing element. As a result, new elements can be placed inside the new list.</desc>
			<arguments>
				<arg>
					<name>itemName</name>
					<desc>Name of the element from to make a list.</desc>
				</arg>
				<arg>
					<name>listname</name>
					<desc>Name of the list.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>hide()</syntax>
			<desc>Makes the widget invisible.</desc>
		</method>
		<method>
			<syntax>processList()</syntax>
			<desc>Transforms the added elements as a Tree. This function must be called after adding all the elements.</desc>		
		</method>
		<method>
			<syntax>remove()</syntax>
			<desc>Removes this widget, along with its child widgets.</desc>
		</method>
		<method>
			<syntax>setCss(array $params)</syntax>
			<desc>Sets CSS atributes to a widget.</desc>
			<arguments>
				<arg>
					<name>params</name>
					<desc>Specifies, in the form of an associative array, the CSS attributes to be applied. Both the key and value of each element must be valid CSS properties and values respectively.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>setHeight(int $height)</syntax>
			<desc>Changes the height of the widget.</desc>
			<arguments>
				<arg>
					<name>height</name>
					<desc>New height, in pixels.</desc>
				</arg>
			</arguments>
		</method>
		<method>
		 	<syntax>setWidth(int $width)</syntax>
			<desc>Changes the width of the widget.</desc>
			<arguments>
				<arg>
					<name>width</name>
					<desc>New width, in pixels.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>setX(int $x)</syntax>
			<desc>Changes the horizontal position of the widget.</desc>
			<arguments>
				<arg>
					<name>x</name>
					<desc>New X coordinate.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>setY(int $y)</syntax>
			<desc>Changes the vertical position of the widget.</desc>
			<arguments>
				<arg>
					<name>y</name>
					<desc>New Y coordinate.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>show(int $noserialize = 0)</syntax>
			<desc>Draws the widget in the screen, allowing to serialize the instance in the session.</desc>
			<arguments>
				<arg>
					<name>noserialize</name>
					<desc>Specifies whether the Tree must be serialized or not. The default value of 0serializes it, while a value of 1 does not.</desc>
				</arg>
			</arguments>
		</method>
		<method>
			<syntax>unhide()</syntax>
			<desc>Makes the widget visible.</desc>
		</method>
	</methods>
</info>
