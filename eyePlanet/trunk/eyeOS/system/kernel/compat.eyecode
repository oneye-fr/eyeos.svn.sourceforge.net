<?php
/*
                                  ____   _____ 
                                 / __ \ / ____|
                  ___ _   _  ___| |  | | (___  
                 / _ \ | | |/ _ \ |  | |\___ \ 
                |  __/ |_| |  __/ |__| |____) |
                 \___|\__, |\___|\____/|_____/ 
                       __/ |                   
                      |___/              1.5

                     Web Operating System
                           eyeOS.org

             eyeOS Engineering Team - eyeOS.org/whoarewe

     eyeOS is released under the GNU Affero General Public License Version 3 (AGPL3)
            provided with this release in license.txt
             or via web at gnu.org/licenses/agpl-3.0.txt

        Copyright 2005-2008 eyeOS Team (team@eyeos.org)

*/
/*
	this file is used to emulate php functions when it are not availables on the current php installation/version
*/

date_default_timezone_set('UTC');

function get_tmp_dir(){
	$path = '';		
	if(!function_exists('sys_get_temp_dir')){	    
		$path = try_get_temp_dir();
	}else{				
		$path = sys_get_temp_dir();
		if(is_dir($path)){
			return $path;	
		}else{			
			$path = try_get_temp_dir();
		}
	}
	return $path;
}

function try_get_temp_dir(){	        
    // Try to get from environment variable
	if(!empty($_ENV['TMP'])){
		$path = realpath($_ENV['TMP']);
	}else if(!empty($_ENV['TMPDIR'])){
		$path = realpath( $_ENV['TMPDIR'] );
	}else if(!empty($_ENV['TEMP'])){
		$path = realpath($_ENV['TEMP']);
	}
	// Detect by creating a temporary file
	else{
		// Try to use system's temporary directory
		// as random name shouldn't exist
		$temp_file = tempnam(md5(uniqid(rand(),TRUE)),'');
		if ($temp_file){
			$temp_dir = realpath(dirname($temp_file));
			unlink($temp_file);
			$path = $temp_dir;
		}else{
			$path = EYE_ROOT.'/'.EYEOS_TMP_DIR;
		}
	}	
	return $path;
}

function ini_get_size($sName)
{
    $sSize = ini_get($sName);
    $sUnit = utf8_substr($sSize, -1);
    $iSize = (int) utf8_substr($sSize, 0, -1);
    switch (utf8_strtoupper($sUnit))
    {
        case 'Y' : $iSize *= 1024; // Yotta
        case 'Z' : $iSize *= 1024; // Zetta
        case 'E' : $iSize *= 1024; // Exa
        case 'P' : $iSize *= 1024; // Peta
        case 'T' : $iSize *= 1024; // Tera
        case 'G' : $iSize *= 1024; // Giga
        case 'M' : $iSize *= 1024; // Mega
        case 'K' : $iSize *= 1024; // kilo
    };
    return $iSize;
}
?>