<?php
/*
                                  ____   _____
                                 / __ \ / ____|
                  ___ _   _  ___| |  | | (___
                 / _ \ | | |/ _ \ |  | |\___ \
                |  __/ |_| |  __/ |__| |____) |
                 \___|\__, |\___|\____/|_____/
                       __/ |
                      |___/              1.8

                     Web Operating System
                           eyeOS.org

             eyeOS Engineering Team - www.eyeos.org/team

     eyeOS is released under the GNU Affero General Public License Version 3 (AGPL3)
            provided with this release in license.txt
             or via web at gnu.org/licenses/agpl-3.0.txt

        Copyright 2005-2009 eyeOS Team (team@eyeos.org)
*/

/*
	eyeOS 1.0 Kernel
*/

$ua=$_SERVER['HTTP_USER_AGENT'];
if(strstr($ua,'MSIE 6')){
	define('IE',6);
} elseif (strstr($ua,'MSIE 7')) {
	define('IE',7);
} elseif (strstr($ua,'MSIE 8')) {
	define('IE',8);
} else {
	define('IE',0);
}

function service($servicename,$servicefunction=null,$params=null,$noListen=0) {	
	$sec_servicename = utf8_basename($servicename);	
	if(!checkServiceLoaded($sec_servicename)){
		if(is_readable(EYE_ROOT.'/'.SYSTEM_DIR.'/'.SERVICE_DIR.'/'.$sec_servicename.'/main'.EYE_CODE_EXTENSION)) {
			include_once(EYE_ROOT.'/'.SYSTEM_DIR.'/'.SERVICE_DIR.'/'.$sec_servicename.'/main'.EYE_CODE_EXTENSION);
			setServiceLoaded($sec_servicename);
			if(function_exists('service_'.$sec_servicename.'_init')) {
				call_user_func('service_'.$sec_servicename.'_init');
			}
		} else {
			return false;
		}
	} 
	
	//TODO: THIS SHOULD WORK USING LISTENER SERVICE CALLS IN A FUTURE.
	if(EYEOS_LOG > 0){	
		if(!function_exists('service_log_init')){
			include_once(EYE_ROOT.'/'.SYSTEM_DIR.'/'.SERVICE_DIR.'/log/main'.EYE_CODE_EXTENSION);						
		}	
		
		if(service_log_checkLog() == false)
		{
			service_log_Lock();
			if(service_log_init(array($sec_servicename)) != EYEOS_LOG_BAD_VALUE)
			{
				service_log_addLog(array($servicename,$servicefunction,$params));
			}
			service_log_unLock();
		}
	}
	
	if(!$servicefunction) {
		return false;
	}
	
	if(!function_exists('service_'.$sec_servicename.'_'.$servicefunction)) {
		return false;
	}
	$minfunction = utf8_strtolower($servicefunction);
 
	genericListener('KListenerList',$sec_servicename,$minfunction,$noListen,$params);
	$ret = call_user_func('service_'.$sec_servicename.'_'.$servicefunction,$params);
	genericListener('KListenerListP',$sec_servicename,$minfunction,$noListen,$params);
	return $ret; 
}

/*
*The reqLib have noListen as true by default since the libraries listener calls are not usually used
*/
function reqLib($libname,$function,$params=null,$noListen=true) {
	$sec_libname = utf8_basename($libname);	
	if(!checkLibraryLoaded($sec_libname)) {				
		if(is_readable(EYE_ROOT.'/'.SYSTEM_DIR.'/'.LIB_DIR.'/'.$sec_libname.'/main'.EYE_CODE_EXTENSION)) {						
			include_once(EYE_ROOT.'/'.SYSTEM_DIR.'/'.LIB_DIR.'/'.$sec_libname.'/main'.EYE_CODE_EXTENSION);
			setLibraryLoaded($sec_libname);
			if(function_exists('lib_'.$sec_libname.'_init')) {
				call_user_func('lib_'.$sec_libname.'_init');
			}
		} else {
			if(!defined('ERROR_LIB_NOT_EXIST')) {
				return -1;
			} else {
				return false;
			}
		}
	}
	if(function_exists('lib_'.$libname.'_'.$function)){
		genericListener('LListenerList',$sec_libname,$function,$noListen,$params);
		$re = call_user_func('lib_'.$libname.'_'.$function,$params);
		genericListener('LListenerListP',$sec_libname,$function,$noListen,$params);
		return $re;
	} else {
		return false;
	}
}

function genericListener($type,$sec_servicename,$minfunction,$noListen,$params){
	if(isset($_SESSION[$type][$sec_servicename][$minfunction]) &&
		is_array($_SESSION[$type][$sec_servicename][$minfunction]) && $noListen == 0){

		foreach($_SESSION[$type][$sec_servicename][$minfunction] as $key=>$value) {
			global $myPid;
			global $checknum;
			global $procInfo;
			$oldProcInfo = $procInfo;
			$oldPid = $myPid;
			$oldChecknum = $checknum;
			$appName = service('proc','findNameByPid',array($key));
			if(!$appName) {
				unset($_SESSION[$type][$sec_servicename][$minfunction][$key]);
			} else {
				$appName = utf8_basename($appName);
				if(is_readable(EYE_ROOT.'/'.APP_DIR.'/'.$appName.'/com'.EYE_CODE_EXTENSION)) {
					include_once(EYE_ROOT.'/'.APP_DIR.'/'.$appName.'/com'.EYE_CODE_EXTENSION);
					if(function_exists($appName.'_com_'.$value)) {
						$myPid = $key;
						$checknum = service('proc','findNChecknumByPid',array($myPid));
						$procInfo = service('proc','getProcByPid',array($myPid));
						i18n('loadLang',array($appName));
						call_user_func($appName.'_com_'.$value,$params);
						$procInfo = $oldProcInfo;
						$myPid = $oldPid;
						$checknum = $oldChecknum;
					} else {
						unset($_SESSION[$type][$sec_servicename][$minfunction][$key]);
					}
				} else {
					unset($_SESSION[$type][$sec_servicename][$minfunction][$key]);
				}
			}
		}
	}
}

function setServiceLoaded($name) {
	if(!$name) {
		return false;
	}
	define(utf8_strtoupper($name).'_LOADED',1);
	return true;
}

function checkServiceLoaded($name) {
	if(!$name) {
		return false;
	}
	if(!defined(utf8_strtoupper($name.'_LOADED'))) {
		return false;
	} else {
		return true;
	}
}

function setLibraryLoaded($name) {
	if(!$name) {
		return false;
	}
	define('LIB_'.utf8_strtoupper($name).'_LOADED',1);
	return true;
}

function checkLibraryLoaded($name) {
	if(!$name) {
		return false;
	}
	if(!defined('LIB_'.utf8_strtoupper($name.'_LOADED'))) {
		return false;
	} else {
		return true;
	}
}

function loadServiceConfig() {	
	if ($handler = opendir(EYE_ROOT.'/'.SYSTEM_DIR.'/'.SYSTEM_CONF_DIR.'/')) {		
		while (false !== ($archivo = readdir($handler))) {			
			if(is_file(EYE_ROOT.'/'.SYSTEM_DIR.'/'.SYSTEM_CONF_DIR.'/'.$archivo)) {
				if ($archivo{0} != "." && filesize(EYE_ROOT.'/'.SYSTEM_DIR.'/'.SYSTEM_CONF_DIR.'/'.$archivo) > 1) {
					$myFile = fopen(EYE_ROOT.'/'.SYSTEM_DIR.'/'.SYSTEM_CONF_DIR.'/'.$archivo,'r');
					$myContent = fread($myFile,filesize(EYE_ROOT.'/'.SYSTEM_DIR.'/'.SYSTEM_CONF_DIR.'/'.$archivo));
					fclose($myFile);					
					$myArray = reqLib('eyeXML','xml2array',array($myContent));										
					if(isset($myArray['CONFIG']) && is_array($myArray['CONFIG'])) {
						if(is_array($myArray['CONFIG'][0])) {
							foreach($myArray['CONFIG'][0] as $key => $value) {								
								define($key,$value[0]);
							}
						}
					}
				}
			}
		}
		closedir($handler);
	}
}

function loadConfig($appName) {
	$appName = utf8_basename($appName);
	if ($handler = opendir(EYE_ROOT.'/'.APP_DIR.'/'.APP_CONF_SHARE.'/'.$appName.'/')) {
		while (false !== ($archivo = readdir($handler))) {
			if ($archivo{0} != "." && filesize(EYE_ROOT.'/'.APP_DIR.'/'.APP_CONF_SHARE.'/'.$appName.'/'.$archivo) > 1) {
				$myFile = fopen(EYE_ROOT.'/'.APP_DIR.'/'.APP_CONF_SHARE.'/'.$appName.'/'.$archivo,'r');
				$myContent = fread($myFile,filesize(EYE_ROOT.'/'.APP_DIR.'/'.APP_CONF_SHARE.'/'.$appName.'/'.$archivo));
				fclose($myFile);
				$myArray = reqLib('eyeXML','xml2array',array($myContent));
				if(is_array($myArray['CONFIG'][0])) {
					foreach($myArray['CONFIG'][0] as $key => $value) {
						define($key,$value[0]);
					}
				}
			}
		}
		closedir($handler);
	}	
}

function getConfig($appName,$archivo='conf.xml') {
	$appName = utf8_basename($appName);
	$archivo = utf8_basename($archivo);
	if(is_readable(EYE_ROOT.'/'.APP_DIR.'/'.APP_CONF_SHARE.'/'.$appName.'/'.$archivo)) {
		$myFile = fopen(EYE_ROOT.'/'.APP_DIR.'/'.APP_CONF_SHARE.'/'.$appName.'/'.$archivo,'r');
		$myContent = fread($myFile,filesize(EYE_ROOT.'/'.APP_DIR.'/'.APP_CONF_SHARE.'/'.$appName.'/'.$archivo));
		fclose($myFile);
		$myArray = reqLib('eyeXML','xml2array',array($myContent));
		return $myArray;
	}
	return false;
}

function setConfig($appName,$file='conf.xml',$arr) {
	$appName = utf8_basename($appName);
	$file = utf8_basename($file);
	$path = EYE_ROOT.'/'.APP_DIR.'/'.APP_CONF_SHARE.'/'.$appName.'/'.$file;
	$xml = eyeXML('array2xml',array($arr));
	file_put_contents($path,$xml);
}

function getAppInfo($app) {
	$app = utf8_basename($app);
	$myFile = EYE_ROOT.'/'.APP_DIR.'/'.$app.'/';
	global $currentUser;
	$oldUser = $currentUser;
	$currentUser = ROOTUSER;
	$xml = reqLib('eyeXML', 'getXMLfile', array($myFile.'info.xml'));
	$currentUser = $oldUser;
	return $xml;
}

function addShortUrl($shortUrl,$msg) {
	global $checknum;
	$_SESSION['shortUrls'][$shortUrl] = array();
	$_SESSION['shortUrls'][$shortUrl]['checknum'] = $checknum;
	$_SESSION['shortUrls'][$shortUrl]['msg'] = $msg;
}

function delShortUrl($shortUrl) {
	unset($_SESSION['shortUrls'][$shortUrl]);
}

//That functions are just wrappers with standar listener names, by default
//Two are created, one for service and another for libraries

/*
*Listener Calls for Services (used in service call)
*/
function addListenerServiceCall($myCallback,$myService,$myCall,$postExecution=0) {
   addGenericListenerCall('KListenerList',$myCallback,$myService,$myCall,$postExecution);
}

function removeListenerServiceCall($myService,$myCall,$postExecution=0) {
   removeGenericListenerCall('KListenerList',$myService,$myCall,$postExecution);
}

function removeListenerServiceCallByPid($pid=null,$postExecution=0){
   removeGenericListenerCallByPid('KListenerList',$pid,$postExecution);
}

function getListenerServiceCallList($postExecution=0) {
   getGenericListenerCallList('KListenerList',$postExecution);
}

/*
*Listener Calls for Libraries (used in reqLib function)
*/
function addListenerLibraryCall($myCallback,$myService,$myCall,$postExecution=0) {
   addGenericListenerCall('LListenerList',$myCallback,$myService,$myCall,$postExecution);
}

function removeListenerLibraryCall($myService,$myCall,$postExecution=0) {
   removeGenericListenerCall('LListenerList',$myService,$myCall,$postExecution);
}

function removeListenerLibraryCallByPid($pid=null,$postExecution=0){
   removeGenericListenerCallByPid('LListenerList',$pid,$postExecution);
}

function getListenerLibraryCallList($postExecution=0) {
   getGenericListenerCallList('LListenerList',$postExecution);
}

/*
*Generic functions for Listener calls, only the name of the array change
*/
function addGenericListenerCall($type,$myCallback,$myService,$myCall,$postExecution=0){
	global $myPid;
	$call = utf8_strtolower($myCall);
	if($postExecution !=0 ) {
		$type .= 'P';
	}
	$_SESSION[$type][$myService][$call][$myPid] = $myCallback;
	$_SESSION[$type]['pInfo'][$myPid][$myService] = $call;
}

function removeGenericListenerCall($type,$myService,$myCall,$postExecution=0){
	global $myPid;
	$call = utf8_strtolower($myCall);
	if($postExecution != 0) {
		$type .= 'P';
	}
	if(isset($_SESSION[$type][$myService][$call][$myPid])) {
		unset($_SESSION[$type][$myService][$call][$myPid]);
		unset($_SESSION[$type]['pInfo'][$myPid]);
	}
}

function getGenericListenerCallList($type,$postExecution=0){
   if($postExecution != 0) {
      $type .= 'P';
   }
   return $_SESSION[$type];
}

function removeGenericListenerCallByPid($type,$pid=null,$postExecution=0){
	if(!$pid){
		return false;
	}
	if($postExecution != 0){
		$type .= 'P';
	}
	if($_SESSION[$type]['pInfo'][$pid]){
		foreach($_SESSION[$type]['pInfo'][$pid] as $service=>$func){
			unset($_SESSION[$type][$service][$func][$pid]);
		}
	}
	unset($_SESSION[$type]['pInfo'][$pid]);
}

/*
*That function create dynamically an alias for each service/library
*/
function createFunctionAlias() {
	$servpath = EYE_ROOT.'/'.SYSTEM_DIR.'/'.SERVICE_DIR.'/';
	$libpath = EYE_ROOT.'/'.SYSTEM_DIR.'/'.LIB_DIR.'/';
	$alias = _getAlias($servpath,'service',0);
	$alias .= _getAlias($libpath,'reqLib',1);
	eval($alias);
}

function _getAlias($path,$baseFunc,$noListen){
	$alias = "";
	if ($handler = opendir($path)) {
		while (false !== ($file = readdir($handler))) {
			if($file{0} != '.' && is_dir($path.$file)) {
				if(file_exists($path.$file.'/alias'.EYE_CODE_EXTENSION)){
					include_once($path.$file.'/alias'.EYE_CODE_EXTENSION);
					if(function_exists($file)){
						continue;
					}
				}
				$alias .= 'if(!function_exists(\''.$file.'\')) {function '.$file.'($call,$args=null,$noListen='.$noListen.') { return '.$baseFunc.'(\''.$file.'\',$call,$args,$noListen); }}';
			}
		}
		closedir($handler);
	}
	return $alias;
}
createFunctionAlias();
include_once(EYE_ROOT.'/'.SYSTEM_DIR.'/'.KERNEL_DIR.'/compat'.EYE_CODE_EXTENSION);

?>