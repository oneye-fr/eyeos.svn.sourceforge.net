<?php
/*
                                  ____   _____
                                 / __ \ / ____|
                  ___ _   _  ___| |  | | (___
                 / _ \ | | |/ _ \ |  | |\___ \
                |  __/ |_| |  __/ |__| |____) |
                 \___|\__, |\___|\____/|_____/
                       __/ |
                      |___/              1.8

                     Web Operating System
                           eyeOS.org

             eyeOS Engineering Team - www.eyeos.org/team

     eyeOS is released under the GNU Affero General Public License Version 3 (AGPL3)
            provided with this release in license.txt
             or via web at gnu.org/licenses/agpl-3.0.txt

        Copyright 2005-2009 eyeOS Team (team@eyeos.org)
*/

/*
 *This is only a wrapper of fileArchive (pear project). 
*/
global $longExtensions;
$longExtensions = array('tar.gz'=>'tgz','tar.bz2'=>'tbz');

//Including archive class
require_once EYE_ROOT.'/'.SYSTEM_DIR.'/'.LIB_DIR.'/eyeFileArchive/lib/Archive'.EYE_CODE_EXTENSION;
//Use the eyeOS default tmp directory
File_Archive::setOption('tmpDirectory',get_tmp_dir());

function lib_eyeFileArchive_extract($params=null){
	if($params == null || empty($params[0]) || empty($params[1])){
		reqLib('errorCodes','setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
				
	if(!vfs('real_checkPermissions',array($params[1]))){
		return false;
	}
	_getEqTypes($params);	
	
	//Setting option, if eqTypes, if eqTypes is null, nothing special happens	
	if(isset($params['eqTypes'])){
		File_Archive::setOption('eqTypes',$params['eqTypes']);	
	}		
				
	$myReaders = _getReaders($params);	
	$result = File_Archive::extract($myReaders,$params[1]);
	if($result != null){
		return false;
	}
	
	//convert it to virtual file
	global $readFiles;
	
	if(!$params['realOutput']){
		foreach($readFiles as $file){		
			if(vfs('isdir',array($file))){
				vfs('realToVirtualDir',array($file));
			}else{
				vfs('realToVirtual',array($file));
			}		
		}
	}	
		
	return true;
}

function lib_eyeFileArchive_list($params){
	if($params == null || empty($params[0])){
		reqLib('errorCodes','setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	//Checking if user have a permissions for do it
	if(!vfs('real_checkPermissions',array($params[0]))){
		reqLib('errorCodes','setErrorCode',array(VFS_INSUFFICIENT_PERMISSIONS));
		return false;
	}	
	_getEqTypes($params);
	
	//Needed for filearchive pear lib
	$params[0] .= '/';	
		
	//Setting option, if eqTypes, if eqTypes is null, nothing special happens	
	if(isset($params['eqTypes'])){
		File_Archive::setOption('eqTypes',$params['eqTypes']);	
	}	
	
	$read = File_Archive::read($params[0]);	
	//Getting all files		
	while($read->next() != false){
		$fileArray[] = $read->getFilename();		
	}		
	//Return the info files
	return $fileArray;
}


function lib_eyeFileArchive_compress($params=null){
	if($params == null || count($params) < 2){
		reqLib('errorCodes','setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	_getEqTypes($params);
	if(!vfs('real_checkPermissions',array($params[1]))){
		return false;
	}	
	//Setting option, if eqTypes, if eqTypes is null, nothing special happens	
	if(isset($params['eqTypes'])){
		File_Archive::setOption('eqTypes',$params['eqTypes']);	
	}
	$myReaders = _getReaders($params);
	
	$myAppender = File_Archive::appender($params[1]);
	$result = File_Archive::extract($myReaders,$myAppender);	
	if($result != ''){
		return false;
	}
	if(!$params['realOutput']){
		vfs('realToVirtual',array($params[1]));
	}	
	return true;
}

function _getEqTypes(&$params){
	global $longExtensions;
	if(is_array($params[0])){
		//if have a files stored in archived
		if(is_array($params[0]['archived'])){
			foreach($params[0]['archived'] as $arcSource){
				if(!vfs('real_checkPermissions',array($arcSource[0])) || empty($arcSource[0])){
					return false;
				}
				$ext = utf8_strtolower(vfs('getExtension',array($arcSource[0])));
				if(!array_key_exists($ext,$params['eqTypes'])){
					$realExt = vfs('real_getExtension',array($arcSource[0]));
					if(isset($longExtensions[$realExt])){
						$realExt = $longExtensions[$realExt];
					}
					$params['eqTypes'][$ext] = $realExt;
				}				
			}
		}
		if(is_array($params[0]['simple'])){
			foreach($params[0]['simple'] as $arcSource){
				if(!vfs('real_checkPermissions',array($arcSource)) || empty($argSource)){
					return false;
				}				
				$ext = utf8_strtolower(vfs('getExtension',array($arcSource)));
				if(!empty($ext) && !array_key_exists($ext,$params['eqTypes'])){
					$realExt = vfs('real_getExtension',array($arcSource));
					if(isset($longExtensions[$realExt])){
						$realExt = $longExtensions[$realExt];
					}
					$params['eqTypes'][$ext] = $realExt;
				}				
			}
		}
	}else{
		$ext = utf8_strtolower(vfs('getExtension',array($params[0])));	
		if(!array_key_exists($ext,$params['eqTypes'])){
			$realExt = vfs('real_getExtension',array($params[0]));
			if(isset($longExtensions[$realExt])){
				$realExt = $longExtensions[$realExt];
			}			
			$params['eqTypes'][$ext] = $realExt;
		}	
	}
}


function _getReaders(&$params){
//This array content de extracted files with sym if have
	global $readFiles;
	if(!is_array($params[0])){
		$sym = vfs('getVirtualName',array($params[0]));
		$ext = vfs('real_getExtension',array($sym));
		$sym = utf8_basename($sym);
		//Adding to extracted arrray
		$readFiles[] = $params[1].'/'.$sym;
		if($params[0]{utf8_strlen($params[0])} != '/'){
			$params[0] .= '/';
		}
		$myReaders = File_Archive::read($params[0],$sym);
	}else{
		$myReaders = array();
		//if have a complex sources
		if(is_array($params[0]['archived'])){
			foreach($params[0]['archived'] as $complexSource){
				if(empty($complexSource[0])){
					continue;
				}
				$archived = $complexSource[0];
				array_shift($complexSource);
				foreach($complexSource as $fileInArc){
					$file = $archived.'/'.$fileInArc;
					$readFiles[] = $params[1].'/'.$fileInArc;
					if(is_file($archived) == true){
						$myReaders[] = File_Archive::read($file,$fileInArc);
					}else{
						$file = vfs('getRealName',array($file));
						$myReaders[] = File_Archive::read($file,$fileInArc);
					}
				}		
			}
		}	
		if(is_array($params[0]['simple'])){
			foreach($params[0]['simple'] as $file){
				$sym = vfs('getVirtualName',array($file));
				if(!vfs('fileExists',array($sym))){
					$sym = $file;
				}
				$sym = utf8_basename($sym);

				if($file{utf8_strlen($file)} != '/'){
					$file .= '/';
				}				
				$readFiles[] = $params[1].'/'.$sym;
				$myReaders[] = File_Archive::read($file,$sym);
			}
		}	
	}
	return $myReaders;
}
function lib_eyeFileArchive_supportedTypes(){
	$files = array();
	
	$files[] = 'zip';//This is write in pure php
	$files[] = 'tar';//Also write in pure php
	if(function_exists('gzopen')){
		$files[] = 'gz';//Generally all php builds have it
		$files[] = 'tgz';//Generally all php builds have it	
	}
	if(function_exists('bzopen')){
		$files[] = 'bz';//Generally it is a php module
		$files[] = 'bz2';//Generally it is a php module	
	}
	return $files;
}
?>
