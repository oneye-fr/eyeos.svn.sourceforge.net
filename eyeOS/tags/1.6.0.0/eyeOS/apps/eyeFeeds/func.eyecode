<?php
/*
                                  ____   _____ 
                                 / __ \ / ____|
                  ___ _   _  ___| |  | | (___  
                 / _ \ | | |/ _ \ |  | |\___ \ 
                |  __/ |_| |  __/ |__| |____) |
                 \___|\__, |\___|\____/|_____/ 
                       __/ |                   
                      |___/              1.6

                     Web Operating System
                           eyeOS.org

             eyeOS Engineering Team - eyeOS.org/whoarewe

     eyeOS is released under the GNU Affero General Public License Version 3 (AGPL3)
            provided with this release in license.txt
             or via web at gnu.org/licenses/agpl-3.0.txt

        Copyright 2005-2008 eyeOS Team (team@eyeos.org)         
*/

define('EYEFEEDS_FEEDITEMS_FETCHNUMBER', 16);
define('EYEFEEDS_FEEDITEMS_CACHELOCATION', EYE_ROOT.'/'.APP_DIR.'/share/eyeFeeds/cache/');
define('EYEFEEDS_FEEDITEMS_CACHEDURATION', 3600);
define('EYEFEEDS_FEEDITEMS_CONTENT_DISPLAYEDSIZE', 1800);

/*********************************************************************************************/
//		EYEFEEDS GRAPHICAL FUNCTIONS
/*********************************************************************************************/

/**
 *
 * @param unknown_type $data
 * @return Tree
 */
function eyeFeeds_drawFeedsTree($folderNode) {
	if ($GLOBALS['feeds_TREE']) {
		$GLOBALS['feeds_TREE']->remove();
		$GLOBALS['selectedFeedId_HID']->setText('');
	}
	
	$myTree = new Tree(array(
		'name'=>'feeds_TREE',
		'father'=>'left_BOX',
		'x'=>0,
		'y'=>24,
		'width' =>180,
		'height' => 300,
		'clickTree'=>1
	));
	$myTree->show();
	
	//root node
	$myTree->addItem('feeds_TREE', 'feeds_TREE_root', 'Bookmarks');
	$myTree->addSubList('feeds_TREE_root', 'feeds#folder_root');
	eyeFeeds_drawFeedsTree_addContextMenu('feeds#menu_feeds_TREE_root','feeds_TREE_root', true);
	
	if(is_array($folderNode['feed'])) {
		foreach($folderNode['feed'] as $node) {
			$displayedNodeName = (utf8_strlen($node['name'][0]) > 20)? substr($node['name'][0], 0, 17).'...' : $node['name'][0];
			if($node['type'][0] == 'folder') {
				$myTree->addItem('feeds#folder_root', 'feeds#item_'.$node['id'][0], $displayedNodeName);
				$myTree->addSubList('feeds#item_'.$node['id'][0], 'feeds#folder_'.$node['id'][0]);
				eyeFeeds_drawFeedsTreeNode($myTree, 'feeds#folder_'.$node['id'][0], $node, false, 'feeds#');
				eyeFeeds_drawFeedsTree_addContextMenu('feeds#menu_'.$node['id'][0],'feeds#item_'.$node['id'][0]);
			} else {
				$myTree->addItem('feeds#folder_root', 'feeds#item_'.$node['id'][0], $displayedNodeName);
				eyeFeeds_drawFeedsTree_addContextMenu('feeds#menu_'.$node['id'][0],'feeds#item_'.$node['id'][0]);
			}
		}
	}
	$myTree->processList();	
	return $myTree;
}
function eyeFeeds_drawFeedsTreeNode($treeObject, $parentNode, $folderNode, $foldersOnly=false, $itemsNamesPrefix='') {
	if(is_array($folderNode['feed'])) {
		foreach($folderNode['feed'] as $node) {
			$displayedNodeName = (utf8_strlen($node['name'][0]) > 20)? substr($node['name'][0], 0, 17).'...' : $node['name'][0];
			if($node['type'][0] == 'folder') {
				$treeObject->addItem($parentNode,
									$itemsNamesPrefix.'item_'.$node['id'][0],
									$displayedNodeName);
				$treeObject->addSubList($itemsNamesPrefix.'item_'.$node['id'][0],
										$itemsNamesPrefix.'folder_'.$node['id'][0]);
				eyeFeeds_drawFeedsTreeNode($treeObject,
											$itemsNamesPrefix.'folder_'.$node['id'][0],
											$node);
				eyeFeeds_drawFeedsTree_addContextMenu($itemsNamesPrefix.'menu_'.$node['id'][0], $itemsNamesPrefix.'item_'.$node['id'][0]);
			} elseif (!$foldersOnly) {
				$treeObject->addItem($parentNode,
									$itemsNamesPrefix.'item_'.$node['id'][0],
									$displayedNodeName);
				eyeFeeds_drawFeedsTree_addContextMenu($itemsNamesPrefix.'menu_'.$node['id'][0], $itemsNamesPrefix.'item_'.$node['id'][0]);
			}
		}
	}
}
function eyeFeeds_drawFeedsTree_addContextMenu($menuName, $nodeName, $addOnly=false) {
	$feedId = substr($nodeName, stripos($nodeName, '_')+1);
	
	//add context menu
	$myMenu = new ContextMenu(array(
		'name' => $menuName,
		'father' => $nodeName,
		'searchFather' => 1,
		'rfather' => $nodeName
	));
	$myMenu->show();
	
	//ADD FEED
	$myMenu->addEntry(
		'<img src="index.php?extern=apps/eyeFeeds/gfx/addfeed_menu.png" /> &nbsp; '.i18n('translate',array('Add feed')),
		'feeds_CMN_addFeed_ENT',
		'feeds_CMN_addFeed_ENT',
		$feedId
	);
	//ADD FOLDER
	$myMenu->addEntry(
		'<img src="index.php?extern=apps/eyeFeeds/gfx/addfolder_menu.png" /> &nbsp; '.i18n('translate',array('Add folder')),
		'feeds_CMN_addFolder_ENT',
		'feeds_CMN_addFolder_ENT',
		$feedId
	);
	if (!$addOnly) {
	//EDIT
		$myMenu->addEntry(
			'<img src="index.php?extern=apps/eyeFeeds/gfx/editfeedfolder_menu.png" /> &nbsp; '.i18n('translate',array('Edit')),
			'feeds_CMN_edit_ENT',
			'feeds_CMN_edit_ENT',
			$feedId
		);
		//DELETE
		$myMenu->addEntry(
			'<img src="index.php?extern=apps/eyeFeeds/gfx/delfeedfolder_menu.png" /> &nbsp; '.i18n('translate',array('Delete')),
			'feeds_CMN_del_ENT',
			'feeds_CMN_del_ENT',
			$feedId
		);
	}
}

function eyeFeeds_clearFeedItems() {
	global $myPid;
	
	$GLOBALS['itemsList_BOX']->setTitle('Select a feed to browse...');
	
	//remove previous table
	if ($GLOBALS['feedItems_TAB'])
		$GLOBALS['feedItems_TAB']->remove();
	
	//create and add new table
	$feedItemsTable = new Sortabletable(array(
		'name' => 'feedItems_TAB',
		'father' => 'itemsList_BOX',
		'x' => 4,
		'y' => 26,
		'width' => $GLOBALS['eyeFeeds_WND']->width - 230,
		'height' => $GLOBALS['eyeFeeds_WND']->height - 350,
		'sortypes' => array('Hidden', 'Html', 'String', 'String', 'String'),
		'master' => 0,
		'theader' => array('id', ' ', 'Title', 'Date', 'Author'),
		'signal' => 'feedItemClick',
		'dblsignal' => 'feedItemDblClick'
	));
	$feedItemsTable->show();
	$feedItemsTable->setCss(array('white-space' => 'nowrap'));
	//remove border of the table
	service('eyex', 'rawjs', array('js' => 'document.getElementById("'.$myPid.'_feedItems_TAB_Container").firstChild.style.border="none";'));
}

function eyeFeeds_clearItemContent() {
	$GLOBALS['itemContent_BOX']->setTitle('Select an item to read...');
	$GLOBALS['content_LBL']->setText('');
}

function eyeFeeds_displayFeedItems($feed, $forceRefresh=false) {
	if (! is_array($feed))
		return;
	
	$items = eyeFeeds_fetchFeedItemsFromUrl($feed['url'][0], $forceRefresh);
	foreach($items as $itemId => $itemData) {
		$itemRowData = array(
			$itemId,
			'<img src="index.php?extern=apps/eyeFeeds/gfx/item_icon.png" />',
			cleanString($itemData['title']),
			$itemData['date'],
			$itemData['author_name']? $itemData['author_name'] : ' '
		);
		$GLOBALS['feedItems_TAB']->addRow($itemRowData);
	}
	$GLOBALS['loading_LBL']->hide();
}

/**
 * Displays the content of an item in the bottom right box of the interface
 *
 * @param array $item
 */
function eyeFeeds_displayItemContent($item) {
	if (! is_array($item))
		return;
	
	global $checknum, $myPid;
	
	//prepare enclosures links
	$enclosuresLinks = '<br /><br />';
	if(count($item['enclosures']) > 0)	{
		foreach($item['enclosures'] as $key => $enc) {
			$enclosuresLinks .= '<a href="#" onclick=\'sendMsg("'.$checknum.'","openEnclosure",eyeParam("itemId","'.md5($item['id']).'")+eyeParam("enc","'.$key.'"));return false;\'>'
									.'Enclosure '.$enc['filename'].' ('.$enc['type'].')'
								.'</a><br />';
		}
		
	}
	
	$GLOBALS['itemContent_BOX']->setTitle($item['title']);
	//NOTE: b64 encoding is used to allow displaying HTML text in the "content" box
	if (!$item['content']) {
		$encodedTextToDisplay = base64_encode('(No content to display)'.$enclosuresLinks);
	} else {
		$content = $item['content'];
		if (utf8_strlen($content) > EYEFEEDS_FEEDITEMS_CONTENT_DISPLAYEDSIZE) {
			$content = substr($content, 0 , EYEFEEDS_FEEDITEMS_CONTENT_DISPLAYEDSIZE);
			$content .= ' (...)';
		}
		$content = cleanString(eyeFeeds_replaceUrlMarksByEyeNavCalls($content));
		$content .= $enclosuresLinks;
		$encodedTextToDisplay = base64_encode($content);
	}
	eyeX('rawjs', array('js' => 'document.getElementById("'.$myPid.'_content_LBL").innerHTML=Base64.decode("'.$encodedTextToDisplay.'");'));
}


/*********************************************************************************************/
//		EYEFEEDS MISC FUNCTIONS
/*********************************************************************************************/

/**
 *
 * @return mixed array or FALSE
 */
function eyeFeeds_getSelectedFeedItem() {
	$itemId = $GLOBALS['feedItems_TAB']->selected;
	if (!$itemId)
		return false;
	
	$item = eyeFeeds_getFeedItem($itemId);
	if (!$item)
		return false;
	
	return $item;
}

function eyeFeeds_getFeedFromId($feeds, $id) {	
	$return = false;
	foreach($feeds as $key => $value) {
		if ($value['type'][0] == 'folder')
			$return = eyeFeeds_getFeedFromId($value['feed'], $id);
		if ($value['id'][0] == $id)
			$return = $feeds[$key];
		
		if ($return !== false)
			break;
	}
	return $return;
}

/**
 *
 * @param array $feeds
 * @param string $id
 * @return mixed array if the parent feed has been found, FALSE otherwise
 */
function eyeFeeds_getParentFeedFromId($feeds, $id) {	
	$return = false;
	//the root node in the XML conf has no ID so we add a fake one
	if (!is_array($feeds['id']))
		$feeds['id'] = array('root');
	foreach($feeds['feed'] as $key => $value) {
		if ($value['type'][0] == 'folder')
			$return = eyeFeeds_getParentFeedFromId($value, $id);
		if ($value['id'][0] == $id)
			$return = $feeds;
		
		if ($return !== false)
			break;
	}
	return $return;
}

/**
 *
 * @param string $id
 * @return array
 */
function eyeFeeds_getFeedItem($id) {
	$return = false;
	$items = eyeFeeds_fetchFeedItemsFromUrl(unserialize($GLOBALS['currentFeedUrl_HID']->text));
	foreach($items as $key => $itemData) {
		if ($key == $id)
			$return = $itemData;
	}
	return $return;
}

function eyeFeeds_addFeed($feeds, $feed, $parentFolderId) {
	if (!is_array($feeds))
		return array();
	
	if ($feeds['id'][0] == $parentFolderId || !$parentFolderId)
		$feeds['feed'][] = $feed;
	else {
		foreach($feeds['feed'] as $key => $value) {
			if ($value['type'][0] == 'folder')
				$feeds['feed'][$key] = eyeFeeds_addFeed($value, $feed, $parentFolderId);
		}
	}
	return $feeds;
}

function eyeFeeds_addFolder($feeds, $folderName, $parentFolderId) {
	if (!is_array($feeds))
		return array();
	
	if ($feeds['id'][0] == $parentFolderId || !$parentFolderId)
		$feeds['feed'][] = array(
			'id' => array(md5($folderName.microtime())),
			'type' => array('folder'),
			'name' => array($folderName),
			'feed' => array()
		);
	else {
		foreach($feeds['feed'] as $key => $value) {
			if ($value['type'][0] == 'folder')
				$feeds['feed'][$key] = eyeFeeds_addFolder($value, $folderName, $parentFolderId);
		}
	}
	return $feeds;
}

function eyeFeeds_deleteFeedFolder($feeds, $feedId) {
	if (!is_array($feeds))
		return false;
	
	foreach($feeds['feed'] as $key => $value) {
		if ($value['id'][0] == $feedId) {
			unset($feeds['feed'][$key]);
			break;
		}
		elseif ($value['type'][0] == 'folder') {
			$feeds['feed'][$key] = eyeFeeds_deleteFeedFolder($value, $feedId);
		}
	}
	return $feeds;
}

function eyeFeeds_saveFeedsToFile($feeds, $redrawFeedsTree=true, $sortFeeds=true) {
	$path = um('getCurrentUserDir').'/'.CONF_USER_DIR.'/eyeFeeds/conf.xml';
	$conf = eyeXML('getXMLfile', array($path));
	
	if ($sortFeeds)
		$feeds['feed'] = eyeFeeds_sortFeeds($feeds['feed']);
	
	$conf['eyeFeeds'][0]['base'][0] = $feeds;
	eyeXML('setXMLfile',array($path, $conf));
	
	//redraw tree with saved configuration
	$conf2 = eyeXML('getXMLfile', array($path));
	if ($redrawFeedsTree) {
		$tree = eyeFeeds_drawFeedsTree($conf2['eyeFeeds'][0]['base'][0]);
		$tree->expandTree();
	}
	
	if (count(array_diff_assoc($feeds,$conf2['eyeFeeds'][0]['base'][0])) == 0)
		return true;
	else
		return false;
}

function eyeFeeds_sortFeeds($feeds) {
	foreach ($feeds as $key => $value) {
		if ($value['type'][0] == 'folder') {
			$value['feed'] = eyeFeeds_sortFeeds($value['feed']);
			$feeds[$key] = $value;
		}
	}
	usort($feeds, eyeFeeds_sortFeeds_compare);
	return $feeds;
}

function eyeFeeds_sortFeeds_compare($a,$b) {
	$return = 0;
	if ($a['type'][0] == $b['type'][0]) {
		$return = strcasecmp($a['name'][0],$b['name'][0]);
	}
	if ($a['type'][0] == 'folder' && $b['type'][0] != 'folder')
		$return -1;
	if ($a['type'][0] != 'folder' && $b['type'][0] == 'folder')
		$return = 1;
	
	return $return;
}

/**
 *
 * @return array The saved feeds
 */
function eyeFeeds_getSavedFeeds() {
	$path = um('getCurrentUserDir').'/'.CONF_USER_DIR.'/eyeFeeds/conf.xml';
	$conf = eyeXML('getXMLfile', array($path));
	
	$xml = array();
	$xml['eyeFeeds'] = array();
	if (!is_array($conf['eyeFeeds']))
		$conf = $xml;

	$xml['eyeFeeds'][0] = array();
	if (!is_array($conf['eyeFeeds'][0]))
		$conf = $xml;

	$xml['eyeFeeds'][0]['base'] = array();
	if (!is_array($conf['eyeFeeds'][0]['base']))
		$conf = $xml;

	$xml['eyeFeeds'][0]['base'][0] = array();
	if (!is_array($conf['eyeFeeds'][0]['base'][0]))
		$conf = $xml;
	
	return $conf['eyeFeeds'][0]['base'][0];
}

function eyeFeeds_replaceUrlMarksByEyeNavCalls($htmlText) {
	$return = preg_replace_callback('/<a (.*?)href="(.*?)"(.*?)>/i',
									eyeFeeds_replaceUrlMarksByEyeNavCalls_callback,
									$htmlText);
	return $return;
}
function eyeFeeds_replaceUrlMarksByEyeNavCalls_callback($matches) {
	global $checknum;
	return eyeFeeds_getEyeNavLinkFromUrl($matches[2]);
}
function eyeFeeds_getEyeNavLinkFromUrl($url, $linkText=null) {
	global $checknum;
	$return = '<a href="#" onclick=\'sendMsg('.$checknum.',"contentLinkClick",eyeParam("url","'.urlencode($url).'"));return false;\'>';
	
	if ($linkText != null)
		$return .= $linkText.'</a>';
	
	return $return;
}


/*********************************************************************************************/
//		RSS READER LIBRARY RELATED FUNCTIONS
/*********************************************************************************************/
/**
 * NOTA: uses the SimplePie library
 * 
 * @param string $url
 * @return array The feed
 */
function eyeFeeds_fetchFeedFromUrl($url, $forceRefresh=false) {
	include_once(EYE_ROOT.'/'.APP_DIR.'/eyeFeeds/simplepie'.EYE_CODE_EXTENSION);
	
	//fetch RSS feed's items
	$simplePie = new SimplePie();
	$simplePie->set_feed_url($url);
	$simplePie->set_cache_location(EYEFEEDS_FEEDITEMS_CACHELOCATION);
	$simplePie->enable_cache(true);
	$simplePie->set_cache_duration(($forceRefresh)? 0 : EYEFEEDS_FEEDITEMS_CACHEDURATION);
	$simplePie->init();
	$simplePie->handle_content_type();
	
	if ($simplePie->error()) {
		eyeX('messageBox',array('content'=> 'Error getting specified feed'));
		return false;
	}
	
	$feed = array(
		'id' => array(md5($url.microtime())),
		'type' => array('feed'),
		'name' => array($simplePie->get_title()),
		'url' => array($url)
	);
	return $feed;
}

/**
 * NOTA: uses the SimplePie library
 * 
 * @param string $url
 * @return array The feed's items
 */
function eyeFeeds_fetchFeedItemsFromUrl($url, $forceRefresh=false) {
	include_once(EYE_ROOT.'/'.APP_DIR.'/eyeFeeds/simplepie'.EYE_CODE_EXTENSION);
	
	//fetch RSS feed's items
	$simplePie = new SimplePie();
	$simplePie->set_feed_url($url);
	$simplePie->set_cache_location(EYEFEEDS_FEEDITEMS_CACHELOCATION);
	$simplePie->enable_cache(true);
	$simplePie->set_cache_duration(($forceRefresh)? 0 : EYEFEEDS_FEEDITEMS_CACHEDURATION);
	$simplePie->init();
	$simplePie->handle_content_type();
	
	$return = array();
	foreach($simplePie->get_items(0, EYEFEEDS_FEEDITEMS_FETCHNUMBER-1) as $key => $simplePieItem) {
		$categories = array();
		foreach($simplePieItem->get_categories() as $cat) {
			$categories[] = $cat->get_label();
		}
		$enclosures = array();
		foreach($simplePieItem->get_enclosures() as $enc) {
			$enclosures[] = array(
				'title' => $enc->get_title(),
				'filename' => substr($enc->get_link(), strrpos($enc->get_link(), '/') + 1),
				'link' => $enc->get_link(),
				'type' => $enc->get_type(),
				'embed' => $enc->embed('',true)
			);
		}
		
		$item = array(
			'id' => $simplePieItem->get_id(),
			'permalink' => $simplePieItem->get_permalink(),
			'title' => $simplePieItem->get_title(),
			'date' => $simplePieItem->get_date(),
			'author_name' => ($simplePieItem->get_author())? $simplePieItem->get_author()->get_name() : ' ',
			'author_email' => ($simplePieItem->get_author())? $simplePieItem->get_author()->get_email() : ' ',
			'author_link' => ($simplePieItem->get_author())? $simplePieItem->get_author()->get_link() : ' ',
			'links' => $simplePieItem->get_links(),
			'categories' => $categories,
			'content' => $simplePieItem->get_content(),
			'enclosures' => $enclosures
		);
		$return[md5($item['id'])] = $item;
	}
	return $return;
}


/*********************************************************************************************/
//		OTHER FUNCTIONS
/*********************************************************************************************/

/**
 * This function makes possible to update the interface BEFORE performing an operation which
 * can take some time to achieve, so we can inform the user that a process has started and
 * he has to wait.
 * 
 * @param array $params An array with at least the following content:
 *                      array('__signal' => the_name_of_the_signal_to_send)
 */
function bounceRequest($params=null) {
	global $checknum;
		
	$sendMsgParams = '';
	foreach($params as $key => $value) {
		if ($key != '__signal')
			$sendMsgParams .= 'eyeParam("'.$key.'", "'.$value.'")+';
	}
	$sendMsgParams .= 'eyeParam("__bounce", "1")';
	
	eyeX('rawjs', array('js' => 'sendMsg('.$checknum.', "'.$params['__signal'].'", '.$sendMsgParams.');'));
}

/**
 * Checks if the calling function was called from a "bounced" request
 * 
 * @param mixed $params Arguments given to the calling function when called 
 * @return boolean TRUE if the arguments indicate that the function is called from a "bounced" request,
 *                 FALSE otherwise
 */
function isFromBouncedRequest($params="") {
	return (is_array($params) && $params['__bounce'][0] == 1);
}

function cleanString($string) {
	$return = '';
	$return = html_entity_decode($string, ENT_QUOTES, mb_detect_encoding($string));
	return $return;
}

?>