<?php
/*
                                  ____   _____ 
                                 / __ \ / ____|
                  ___ _   _  ___| |  | | (___  
                 / _ \ | | |/ _ \ |  | |\___ \ 
                |  __/ |_| |  __/ |__| |____) |
                 \___|\__, |\___|\____/|_____/ 
                       __/ |                   
                      |___/              1.6

                     Web Operating System
                           eyeOS.org

             eyeOS Engineering Team - eyeOS.org/whoarewe

     eyeOS is released under the GNU Affero General Public License Version 3 (AGPL3)
            provided with this release in license.txt
             or via web at gnu.org/licenses/agpl-3.0.txt

        Copyright 2005-2008 eyeOS Team (team@eyeos.org)

*/
/*
	XML library for eyeOS 
*/

/**
* Transforms the content of a XML string to a PHP array.
* 
* @param $params array(content)
* @param $content String containing a XML text. If the XML content has
*	attributes in its tags, they will be ignored.
* @return If the function succeeds, returns true. Otherwise, returns
*	false.
* @date 2008/03/11
*/
function lib_eyeXML_xml2array($params) {
	if(!isset($params[0])){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	$content = $params[0];
	if(!$content) {
		return false;
	}
	return getNodeContent($content);
}

/**
* Converts an array to a string in the XML format. Each key of every
* array element will be transformed to a XML tag, being the value of the
* key the value of the tag.
* 
* @param $params array(myArray,[myHeader])
* @param $myArray Array to be converted. It must have a structure with the
*	same notation the function xml2array uses.
* @param $myHeader If set, precedes the returned text with a XML header.
* @return If the function succeeds, returns the resulting XML content.
*	Otherwise, returns false.
* @date 2008/03/11
*/
function lib_eyeXML_array2xml($params){
	if(!isset($params[0])){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	$myArray = $params[0];
	if(!isset($myArray)) {
		return false;
	}
	if(isset($params[1]) && $params[1] == 1) {
		return lib_eyeXML_getXmlHeader().getArrayText($myArray,-1,1);
	}
	return getArrayText($myArray,-1,1);
}

/**
* Returns a string containing a XML tag with a value inside.
* 
* @param $params array(master,content)
* @param $master Name of the XML tag.
* @param $content Value inside the tag.
* @return Returns the result of embedding the value 'content' inside
*	the tag 'master'.
* @date 2008/03/11
*/
function lib_eyeXML_append($params) {
	if(!isset($params[0]) || !isset($params[1])){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	$master = $params[0];
	$content = $params[1];
	return "<$master>$content</$master>\n";
}

function getArrayText($myArray,$loops,$enter) {
	$text = "";
	$loops++;
	if(!is_array($myArray)) {
		return eyeXML('entityEncode',array($myArray));
		//	return htmlentities($myArray,ENT_QUOTES,'UTF-8');
	}
	foreach($myArray as $key=>$value) {
		foreach($value as $current) {
			if($enter == 0) {
				$text .= "\n";
			} else {
				$enter = 0;
			}
			$text .= utf8_str_pad("",$loops,"\t")."<$key>";
			$temp = getArrayText($current,$loops,0);
			if(!is_array($current)) {
				$text .= $temp;
				$text .= "</$key>\n";
				$enter = 1;
			} else {
				$text .= $temp;
				$text .= utf8_str_pad("",$loops,"\t")."</$key>\n";
				$enter = 1;
			}
		}
	}
	return $text;
}

function getNodeContent($content) {
	$return = null;
	$begin = strstr($content,'<');
	$end = strstr($begin,'>');
	if(!$begin || !$end) {
		return html_entity_decode($content,ENT_QUOTES,'UTF-8');
	}
	$counter=array();
	while(utf8_strlen($content) > 3) { 
		if(!$begin || !$end) {
			break;
		}
		$name = utf8_substr($begin,1,utf8_strlen($begin)-utf8_strlen($end)-1);
		$mySearch = strstr($name," ");
		if($mySearch) {
			$subName = utf8_substr($name,0,utf8_strlen($name)-utf8_strlen($mySearch));
		} else {
			$subName = $name;
		}
		if($name{utf8_strlen($name)-1} == '/') {
			$content = utf8_substr($begin,utf8_strlen($name)+2);
			$begin = strstr($content,'<');
			$end = strstr($begin,'>');
			if(!isset($counter[$subName])) {
				$counter[$subName] = 0;
			}
			$return[$subName][$counter[$subName]] = "";
			$counter[$subName]++;
		} elseif($name{0}=='/') {
			$content = utf8_substr($begin,utf8_strlen($name)+2);
			$begin = strstr($content,'<');
			$end = strstr($begin,'>');
		}else {
			$to = strstr($begin,'</'.$subName.'>');
			$mySize = utf8_strlen($begin)-utf8_strlen($to)-utf8_strlen($name)-2;
			$subContent = utf8_substr($begin,utf8_strlen($name)+2,$mySize);
			$content = utf8_substr($begin,(utf8_strlen($name)*2)+5+utf8_strlen($subContent));
	
			$i = 0;
			$x = substr_count($subContent,'<'.$subName.'>');
			
			if($x > $i) {
				$subContent .= '</'.$subName.'>';
			}
			
			while($x > $i) {
				$to = strstr($content,'</'.$subName.'>');
				$mySize = utf8_strlen($content)-utf8_strlen($to)+strlen('</'.$subName.'>');
				$subContent .= utf8_substr($content,0,$mySize);
				$i++;
				$x = substr_count($subContent,'<'.$subName.'>');
				$content = utf8_substr($content,$mySize);
			}
			
			$begin = strstr($content,'<');
			$end = strstr($begin,'>');
	
			if($name) {	
				if($name{0} == '?') {
					$return = getNodeContent($subContent);
				} elseif ($name{0} == '!') {
					$return = getNodeContent($subContent);
				}else {
					if(!isset($counter[$subName])) {
						$counter[$subName] = 0;
					}
					$return[$subName][$counter[$subName]] = getNodeContent($subContent);
					$counter[$subName]++;
				}
			}
		}
	}
	return $return;
}

/**
* Returns a XML header.
* 
* @return Returns a XML header.
* @date 2008/03/11
*/
function lib_eyeXML_getXmlHeader($params=null) {
	return "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n";
}

/**
* Opens an XML file and returns it as an array.
* 
* @param $params array(file)
* @param $file Path to the file.
* @return If the function succeeds, returns an array with the contents
*	of the file. Otherwise, returns false.
* @date 2008/03/11
*/
function lib_eyeXML_getXMLfile($params) {
	if(!isset($params[0])){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	$file = $params[0];
	$content = vfs('real_getFileContent',array($file));
	$xml = lib_eyeXML_xml2array(array($content));
	return $xml;
}

/**
* Saves a PHP array as an XML file.
* 
* @param $params array(file,myArray,[myHeader])
* @param $file Path to the file.
* @param $myArray PHP array to save as the content of the file.
* @param $myHeader XML header of the file.
* @return If the function succeeds, returns true. Otherwise, returns
*	false.
* @date 2008/03/11
*/
function lib_eyeXML_setXMLfile($params) {
	if(!isset($params[0]) || !isset($params[1])){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	$file = $params[0];
	$myArray = $params[1];
	if(isset($params[2])){
		$myHeader = $params[2];	
	}else{
		$myHeader = '';
	}
	
	if (!service('vfs','real_fileExists',array($file))) {
		service('vfs','real_create',array($file));
	}
	$fp = service('vfs','real_open',array($file,'w'));
	if(!$fp) {
		return false;
	}
	$content = lib_eyeXML_array2xml(array($myArray,$myHeader));	
	fwrite($fp,$content);
	fclose($fp);
	return true;
}

/**
* Opens an XML config file of a specified application inside the user's
* configurations directory, and returns it in the form of an array.
* 
* @param $params array(appname,filename)
* @param $appname Name of the application.
* @param $filename Name of the file to open.
* @return If the function succeeds, returns an array with the contents
*	of the read file. Otherwise, returns false.
* @date 2008/03/11
*/
function lib_eyeXML_getXMLconfig($params) {
	if(!isset($params[0]) || !isset($params[1])){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	$appname = $params[0];
	$filename = $params[1];
	$file = service('um','getCurrentUserDir');
	$file .= '/'.CONF_USER_DIR.'/'.$appname.'/'.$filename;
	$fp = service('vfs','real_open',array($file,'r'));
	if(!$fp) {
		return false;
	}
	$content = fread($fp,filesize($file));
	fclose($fp);
	$xml = lib_eyeXML_xml2array(array($content));
	return $xml;
}

/**
* Updates the configuration file of an application with a specified
* content.
* 
* @param $params array(appname,filename,newConfig)
* @param $appname Name of the application.
* @param $filename Name of the configuration file.
* @param $newConfig PHP array to save as the content of the file.
* @return If the configuration file is written successfully, returns
*	true. Otherwise returns false.
* @date 2008/03/11
*/
function lib_eyeXML_setXMLconfig($params) {
	if(!isset($params[0]) || !isset($params[1]) || !isset($params[2])){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	$appname = $params[0];
	$filename = $params[1];
	$newConfig = $params[2];
	$file = service('um','getCurrentUserDir');
	$file .= '/'.CONF_USER_DIR.'/'.$appname.'/'.$filename;
	if (!vfs('real_fileExists',array($file))) {
		vfs('real_create',array($file));
	}
	$fp = service('vfs','real_open',array($file,'w+'));
	if(!$fp) {
		return false;
	}
	$xml = lib_eyeXML_array2xml(array($newConfig));
	$content = fwrite($fp,$xml);
	fclose($fp);
	return true;
}

/**
* Transforms characters that have HTML entities to their entities.
* 
* @param $params array(string)
* @param $string Input string.
* @return Returns the result of replacing the special HTML characters
*	to their entities.
* @date 2008/03/11
*/
function lib_eyeXML_entityEncode($params){
	if(!isset($params[0])){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	
	$string = $params[0];
	$string = str_replace('&','&amp;',$string);
	$string = str_replace('<','&lt;',$string);
	$string = str_replace('>','&gt;',$string);
	//Simple quote is replaced for his entity number because IE have some problems with character entity.
	$string = str_replace('\'','&#039;',$string);
	$string = str_replace('"','&quot;',$string);
	
	return $string;
}
?>
