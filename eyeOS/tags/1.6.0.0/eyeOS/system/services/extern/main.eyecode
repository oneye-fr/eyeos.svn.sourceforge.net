<?php
/*
                                  ____   _____ 
                                 / __ \ / ____|
                  ___ _   _  ___| |  | | (___  
                 / _ \ | | |/ _ \ |  | |\___ \ 
                |  __/ |_| |  __/ |__| |____) |
                 \___|\__, |\___|\____/|_____/ 
                       __/ |                   
                      |___/              1.6

                     Web Operating System
                           eyeOS.org

             eyeOS Engineering Team - eyeOS.org/whoarewe

     eyeOS is released under the GNU Affero General Public License Version 3 (AGPL3)
            provided with this release in license.txt
             or via web at gnu.org/licenses/agpl-3.0.txt

        Copyright 2005-2008 eyeOS Team (team@eyeos.org)

*/
/*
	eyeOS external files service
*/
/*
	extern service is the way to get files, like css, js and images ignoring the EYE_ROOT content
	because EYE_ROOT can change in each installation, and should be "secret"
*/

define('MAX_FILE_EXTENSION',8);
define('MAX_FILE_NAME_LEN',40);


/**
* Retrieves a file located in the eyeOS extern directory.
* 
* @param $params array(path,type)
* @param $path Path to the file inside the extern directory.
* @param $type Type of resource. Possible type values are:
    				image:
*	used for loading images
    				download: used to force the
*	downloading of a file
    				css: used for loading CSS
*	files
    				swf: used for loading Flash (.swf) files
   
*					dynamic: used for files ending with EYE_CODE_EXTENSION
*	(by default '.eyecode'). The code of the files will be
*	loaded, executing the get_dynamic_content function and
*	returning its result. 
* @return This function does not return any value.
* @date 2008/03/11
*/
function service_extern_getFile($params) {	
	if(!isset($params[0])){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	if (!empty($_REQUEST['theme'] ) && $_REQUEST['theme'] == '1') {
		$params[0] = utf8_substr(eyex('getThemeImage',array($params[0],1)),utf8_strlen('index.php?extern='));
	}
	
	$info = utf8_pathinfo($params[0],'a');
	$type = $params[1];
	$myDir = $info['dirname'];
	$myFile = $info['basename'];
	$myExt = $info['extension'];

	//let's protect against header tricks	
	$myExt = str_replace("\n",'',$myExt);
	$myExt = str_replace("\r",'',$myExt);
	$myFile = str_replace("\n",'',$myFile);
	$myFile = str_replace("\r",'',$myFile);
		
	if(utf8_strlen($myExt) > MAX_FILE_EXTENSION) {
		return;
	}
	
	if(utf8_strlen($myFile > MAX_FILE_NAME_LEN)) {
		return;
	}
	
	unset($info); //we don't need it anymore
	
	$myDir = realpath(EYE_ROOT.'/'.EXTERN_DIR.'/'.$myDir); //needed? maybe
	
	$extern_path = realpath(EYE_ROOT.'/'.EXTERN_DIR.'/');

	if (0 !== utf8_strpos ($myDir,$extern_path)) { //check dir
		return;
	} 
	
	if(is_readable($myDir.'/'.$myFile)) {		
		$len = filesize($myDir.'/'.$myFile);		
		if($type == 'text') {
			header("Content-type: text/plain");	
		} elseif ($type == 'image' || $myExt == 'png' || $myExt == 'jpg' || $myExt == 'gif') {
			header('Content-Type: image/'.$myExt);
		} elseif ($type == 'download') {
			header('Content-Type: application/force-download');
			header("Content-Description: File Transfer");
			header('Content-Disposition: attachment; filename="'.$myFile.'"');
		} elseif ($type == 'css' || $myExt == 'css') {
			header("Content-type: text/css");
		} elseif($type == 'swf'  || $myExt == 'swf'){
			header("Content-type: application/x-shockwave-flash");
		} elseif($type == 'dynamic') {
			include_once($myDir.'/'.$myFile);
			if(function_exists('get_dynamic_content')) {
				$return = get_dynamic_content($_GET['params']);
				$len = strlen($return);
			}
		}
		header("Content-Length: $len");
		header("Accept-Ranges: bytes");
		header("X-Pad: avoid browser bug");
		if($type == 'dynamic') {
			echo $return;
		} else {			
			readfile($myDir.'/'.$myFile);
		}
	} 
}
