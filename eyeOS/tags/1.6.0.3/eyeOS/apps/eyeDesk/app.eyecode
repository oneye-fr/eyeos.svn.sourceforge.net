<?php
/*
                                  ____   _____ 
                                 / __ \ / ____|
                  ___ _   _  ___| |  | | (___  
                 / _ \ | | |/ _ \ |  | |\___ \ 
                |  __/ |_| |  __/ |__| |____) |
                 \___|\__, |\___|\____/|_____/ 
                       __/ |                   
                      |___/              1.6

                     Web Operating System
                           eyeOS.org

             eyeOS Engineering Team - eyeOS.org/whoarewe

     eyeOS is released under the GNU Affero General Public License Version 3 (AGPL3)
            provided with this release in license.txt
             or via web at gnu.org/licenses/agpl-3.0.txt

        Copyright 2005-2008 eyeOS Team (team@eyeos.org)         
*/
/*
	eyeDesk
	
	This is the whole desktop application.
*/

/*
	this function is called when eyeDesk is launched, takes one parameter as argument,
	this parameter is passed to showDesk.
*/

define('EYEDESK_DEFAULT_APP_EXT','.app'); //in a near future, this will moved to a config

function eyeDesk_run($params=null) {
	/**prepare the screen**/	
	service('eyex','createDiv',array('nopid'=>1,'removepid'=>1,'name'=>'eyeMessageBox', 'father' => 'eyeScreen','class'=>'eyeMessageBox'));
	service('eyex','createDiv',array('nopid'=>1,'removepid'=>1,'name'=>'eyeMessageBoxText', 'father' => 'eyeMessageBox','class'=>'eyeMessageBoxText'));
	
	service('eyex','createDiv',array('nopid'=>1,'removepid'=>1,'name'=>'minimizedApps', 'father' => 'eyeScreen','class'=>'minimizedApps'));
	service('eyex','createDiv',array('nopid'=>1,'removepid'=>1,'name'=>'minimizedAppsIn', 'father' => 'minimizedApps','class'=>'minimizedAppsIn'));
	service('eyex','createDiv',array('nopid'=>1,'removepid'=>1,'name'=>'minimizedAppsRight', 'father' => 'eyeScreen','class'=>'minimizedAppsRight'));
	service('eyex','createDiv',array('nopid'=>1,'removepid'=>1,'name'=>'minimizedAppsLeft', 'father' => 'eyeScreen','class'=>'minimizedAppsLeft'));
	
	service('eyex','createDiv',array('nopid'=>1,'removepid'=>1,'name'=>'minIconLeft', 'father' => 'eyeScreen','class'=>'minIconLeft'));
	service('eyex','createDiv',array('nopid'=>1,'removepid'=>1,'name'=>'minIconRight', 'father' => 'eyeScreen','class'=>'minIconRight'));
	eyeDesk_showDesk($params[0]);
}

/*
	this function load the user desk, normally is launched by eyeLogin on correct login.
	
	basically, this app reads the current config for the user, reload the css of the 
	visual style according to the user-selected (only if are diferent from the system default)
	
	sets the user wallpaper.
	
	Show one icon in the desktop for each element into userHome/Desktop
	
	And if needed, launch autolaunch apps
*/
function eyeDesk_showDesk($autorun) {
	global $checknum;
	global $currentUser;
	global $myPid;
	
	//get current user directory
	$myUserDir = service('um','getCurrentUserDir');
	$configFile = $myUserDir.'conf/eyeDesk/conf.xml';
	
	//if tmp do not exist, create it:
	if(!vfs('real_fileExists',array($myUserDir.'/tmp'))) {
		vfs('real_mkdir',array($myUserDir.'/tmp'));
	}
	
	//if config file not exists, create it
	if(!service('vfs','real_fileExists',array($configFile))) {
		$skelDir = EYE_ROOT.'/'.SYSTEM_DIR.'/'.SYSTEM_CONF_DIR.'/skel/conf/eyeDesk/conf.xml';
		copy($skelDir,$configFile);
	}
	
	//load settings	
	$shareSettings = getConfig('eyeDesk','conf.xml');
	$mySettings = eyeXML('getXMLfile',array($configFile));
	
	if($mySettings['eyeDesk'][0]['restoreDock'][0] != $shareSettings['eyeDesk'][0]['restoreDock'][0]) {
		//Restoring doc		
		copy(EYE_ROOT.'/'.SYSTEM_DIR.'/'.CONF_USER_DIR.'/skel/'.CONF_USER_DIR.'/eyeDock/eyeDock.xml',$myUserDir.'/'.CONF_USER_DIR.'/eyeDock/eyeDock.xml');
		$mySettings['eyeDesk'][0]['restoreDock'][0] = $shareSettings['eyeDesk'][0]['restoreDock'][0];
		//Adding miniAction in startup		
		if(array_search('miniActions',$mySettings['eyeDesk'][0]['autolaunch']) === false){
			$mySettings['eyeDesk'][0]['autolaunch'][] = 'miniActions';
		}
		
		eyeXML('setXMLfile',array($configFile,$mySettings));
		
	}
	
	unset($shareSettings);
	$userTheme = utf8_basename($mySettings['eyeDesk'][0]['theme'][0]);
	eyeSessions('setVar',array('usertheme',$userTheme));
	$tokens[] = $userTheme;
	service('eyex','runjs',array('js'=>"eyeTheme = %s;",'tokens'=>$tokens));
	
	//check if the theme selected by the user is diferent from the default theme
	//if true, reload theme to set the prefered by the user.
	if($userTheme != DEFAULT_THEME) {
		//open the css dir of the user selected theme
		//TODO: PORT IT TO THE VFS, THIS DIR READ
		if ($handler = opendir(EYE_ROOT.'/'.EXTERN_DIR.'/apps/eyeX/themes/'.$userTheme.'/css/')) {
			while (false !== ($file = readdir($handler))) {
				if ($file {0} != ".") {
					$file = str_replace('.css','',$file);
					service('eyex','removeCSS',array('id' => $file.'Css'));
					if(!strstr($file,'IE')) {
						service('eyex','loadCSS',array('url' => 'index.php?extern=apps/eyeX/themes/'.$userTheme.'/css/'.$file.'.css&type=css','id' => $file.'Css'));
					} elseif((strstr($file,'IE6') && IE == 6) || (strstr($file,'IE7') && IE == 7)) {
						$myIE[] = $file;
					}
				}
			}
			closedir($handler);
			if(is_array($myIE)) {
				foreach($myIE as $file) {
					service('eyex','loadCSS',array('url' => 'index.php?extern=apps/eyeX/themes/'.$userTheme.'/css/'.$file.'.css&type=css','id' => $file.'Css'));
				}
			}
		}
	}
	
	//if the user has a wallpaper uploaded set his wallpaper
	$myWllpPath = $mySettings["eyeDesk"][0]["wallpaper"][0];
	if($myWllpPath && service('vfs','fileExists',array($myWllpPath))) {
		if($mySettings['eyeDesk'][0]['wallpaperRepeat'][0] == '1') {
			$repeat = 1;
		} else {
			$repeat = 0;
		}
		if($mySettings['eyeDesk'][0]['wallpaperCenter'][0] == '0') {
			$center = 0;
		} else {
			$center = 1;
		}
		service('eyex','setWallpaper',array('path' => "index.php?checknum=$checknum&msg=getWallpaper&params=", 'repeat' => $repeat, 'center' => $center));
	}
	
	include_once(EYE_ROOT.'/'.APP_DIR.'/eyeDesk/draw'.EYE_CODE_EXTENSION);
	drawDesktop();
	
	//if this is the first execution
	//run auto launch apps
	//$autorun is getted by showDesk argument.
	if($autorun == 'autorun') {
		foreach($mySettings['eyeDesk'][0]['autolaunch'] as $value) {
			$pid = service('proc','findPidByName',array($value));
			if($pid) {
				service('proc','getTask',array($pid));
			} else {
				service('proc','launch',array($value));
			}
		}
		$x = 0;
		foreach($mySettings['eyeDesk'][0]['nextlaunch'] as $value) {
			$pid = service('proc','findPidByName',array($value));
			if($pid) {
				service('proc','getTask',array($pid));
			} else {
				service('proc','launch',array($value));
			}
			unset($mySettings['eyeDesk'][0]['nextlaunch'][$x]);
			eyeXML('setXMLfile',array($configFile,$mySettings));
			$x++;
		}
	//if not, re-execute all processes from the process table.
	} else {
		//call to the getTask's of launched apps
		$myProcTable = service('proc','getProcessTable');
		foreach($myProcTable as $key => $value) {
			$name = $value['appName'];
			//eyeX and eyeDesk are in the process table but not should be re-executed
			if($name != 'eyeX' && $name != 'eyeDesk') {
				service('proc','getTask',array($key));
			}
		}
	}
		
	//listener service calls for real-time desktop
	addListenerServiceCall('onCreate','vfs','create',1);
	addListenerServiceCall('onDelete','vfs','delete',1);
	addListenerServiceCall('onMkdir','vfs','mkDir',1);
	addListenerServiceCall('onRmdir','vfs','rmdir',1);
	
	//add contextmenu here
	$myContextMenu = new ContextMenu(array('name'=>'deskMenu','father'=>'eyeApps'));
	$myContextMenu->show();
	$entrys = getConfig('eyeDesk','contextMenu.xml');
	$counter = 0;
	foreach($entrys['menu'][0]['entry'] as $value) {
		$myContextMenu->addEntry("<img src=index.php?extern=apps/eyeX/themes/default/icons/16x16/".$value['icon'][0].".png /> &nbsp;".i18n('translate',array($value['text'][0])),'MNU_desk_'.$counter,$value['signal'][0]);
		$counter++;
	}
	//Welcome to the system message
	service('eyex','messageBox',array('content'=>'Welcome to %s, %s.','tokens'=>array(EYEOS_HOSTNAME,'<strong>'.$currentUser.'</strong>')));
}


