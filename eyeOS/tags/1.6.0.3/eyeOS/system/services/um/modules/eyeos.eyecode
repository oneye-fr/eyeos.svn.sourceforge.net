<?php
/*
                                  ____   _____ 
                                 / __ \ / ____|
                  ___ _   _  ___| |  | | (___  
                 / _ \ | | |/ _ \ |  | |\___ \ 
                |  __/ |_| |  __/ |__| |____) |
                 \___|\__, |\___|\____/|_____/ 
                       __/ |                   
                      |___/              1.6

                     Web Operating System
                           eyeOS.org

             eyeOS Engineering Team - eyeOS.org/whoarewe

     eyeOS is released under the GNU Affero General Public License Version 3 (AGPL3)
            provided with this release in license.txt
             or via web at gnu.org/licenses/agpl-3.0.txt

        Copyright 2005-2008 eyeOS Team (team@eyeos.org)

*/
/*
	UserManager service
*/

/* 
	userInfo[0] = username
*/

/*Xml userInfo.xml in USERDIR/conf/
 * <username>
 * <password>
 * <email>
 * <creationDate>
 */


/*--------------------------------------------------------------------*/
/* USER CRUD FUNCTIONS
/*--------------------------------------------------------------------*/

/**
* Creates a new user, including its info file in the accounts directory
* and the user directory.
* 
* @param $params array(username,password,[email])
* @param $username String containing the username.
* @param $password String containing the password.
* @param $email String containing the email of the user
* @return If the function succeeds, returns true. Otherwise, returns
*	false and sets the error code depending on the error
*	occurred.
* @exception INCORRECT_PARAMS One or both required parameters are not specified, the username is not strictly alphanumeric, the username is shorter than two characters or it is too long.
* @exception UM_USER_ALREADY_EXISTS There already exists a username with the same name.
* @date 2008/03/11
*/
function service_um_createUser($params = null){
//Check arguments
	if($params == null || count($params) < 2){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	if(!$params['username'] || !$params['password']) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	if (!preg_match("/^[-_a-zA-Z0-9]+$/", $params['username'])) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	if(utf8_strlen($params['username']) < 2 || utf8_strlen($params['username']) > MAX_USERNAME_LEN) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
//Check if user exists.
	$username = $params['username'];
	if(um('userExist',array($username))) {
		errorCodes('setErrorCode',array(UM_USER_ALREADY_EXISTS));
		return false;
	}
// Create new user dirs
	$myDir = um('getUserDir',array($username));
	if(!vfs('real_exists',array(EYE_ROOT.'/'.USERS_DIR.'/'.getAcronim(array($username))))){
		vfs('mkDir',array(EYE_ROOT.'/'.USERS_DIR.'/'.getAcronim(array($username))));
	}
	if(!vfs('real_exists',array($myDir))){
		vfs('mkDir',array($myDir));
	}
	if(!vfs('real_exists',array(service_um_getUserFilePath(array($username,1))))){
		vfs('mkDir',array(service_um_getUserFilePath(array($username,1))));
	}
// Copy skel to user
	recursiveCopy(EYE_ROOT.'/'.SYSTEM_DIR.'/'.'/conf/skel/',$myDir);
		//Real create make real_fileExists now.
//handling userInfo.
	$password = md5($params['password'] . md5($params['password']));
	$email = $params['email'];
	$fullname = $params['fullname'];
	$createDate = time();
	if (is_array($params['groups'])) {
		$groups = $params['groups'];
	} elseif ($params['groups']) {
		$groups = array($params['groups']);
	} else {
		$groups = array(DEFAULT_GROUP);
	}
		//TODO: put a basic handler for user, pass or email?
// Create users xml file
	$data = Array(
		'eyeUser' => array(
			array(
				'username' => array($username),
				'password' => array($password),
				'email' => array($email),
				'fullname' => array($fullname),
				'createDate' => array($createDate),
				'group' => $groups
			)
		)
	);
	$xml = eyeXML('array2xml',array($data,1));
	$file = service_um_getUserFilePath(array($username));
	vfs('real_create',array($file));
	$fp = vfs('real_open',array($file,'w'));
	//Error handling
	if(!$fp){
		return false;
	}
	fwrite($fp,$xml);
	fclose($fp);
	return true;
}

/**
* Gets the content of a user's info file.
* 
* @param $params array(username)
* @param $username String containing the name of the user.
* @return If the function succeeds, returns the user's info in the
*	form of an XML array. Otherwise, returns false and sets the
*	error code depending on the error occurred.
* @exception INCORRECT_PARAMS No username is specified.
* @date 2008/03/11
*/
function service_um_retrieveUser($params = null){
	 
	if($params == null || count($params) < 1){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}	
	
	$username = utf8_basename($params[0]);
	global $currentUser;
	if($currentUser != $username && $currentUser != ROOTUSER) {
		return false;
	}
	$filePath = service_um_getUserFilePath(array($username));
	$oldUser = $currentUser;
	$currentUser = ROOTUSER;
	$fp = vfs('real_open',array($filePath,'r'));
	$currentUser = $oldUser;
	//Error handling
	if(!$fp){
		return false;
	}
	$xml = fread($fp,filesize($filePath));
	fclose($fp);
	return eyeXML('xml2array',array($xml));//Return the array generated by eyeXML	
}

/**
* Checks if a user exists.
* 
* @param $params array(username)
* @param $username Name of the user.
* @return Returns a boolean value indicating whether or not a user
*	with the given name exist. If some error occurs, returns
*	false and sets the error accordingly.
* @exception INCORRECT_PARAMS No username is specified.
* @date 2008/03/11
*/
function service_um_userExist($params = null){
	 
	if($params == null || count($params) < 1){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}	
	
	$username = utf8_basename($params[0]);
	$filePath = service_um_getUserFilePath(array($username));
	
	if(file_exists($filePath)) {
		return true;
	} else {
		return false;
	}
}

/**
* Updates a user's information contained in user's paramets file.
* 
* @param $params array(username,[password],[fullname],[email],[creationDate],[group])
* @param $username String containing the username of the user.
* @param $password String containing the password of the user.
* @param $fullname String containing the full name of ther account's owner.
* @param $email Email of the user.
* @param $creationDate Date indicating when the user was created.
* @param $group Specifies, in the form of an indexed or as a string, the
*	group(s) in which the user belongs.
* @return If the function succeeds, returns true. Otherwise, returns
*	false and sets the error code depending on the error
*	occurred.
* @exception INCORRECT_PARAMS No username is specified.
* @date 2008/03/11
*/
function service_um_updateUser($params = null){
	 //TODO: realy admin? currentuser?
	 if($params == null || count($params) < 1){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	 }
	  
	 if($params['username'] == null)
	 {
	 	errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	 } 
	 
	 global $currentUser;
	 
	 //user should be current user, or run as root
	 if($currentUser != $params['username'] && $currentUser != ROOTUSER) {
	 	return false;
	 }
	 
	 //TODO: Make findUserByName?
	$userInfo = um('retrieveUser',array(utf8_basename($params['username'])));
	if (isset($params['password'])) {
		$userInfo['eyeUser'][0]['password'][0] = $params['password'];
	}
	if (isset($params['email'])) {
		$userInfo['eyeUser'][0]['email'][0] = $params['email'];
	}
	if (isset($params['fullname'])) {
		$userInfo['eyeUser'][0]['fullname'][0] = $params['fullname'];
	}
	if($currentUser == ROOTUSER) {
		if (isset($params['createDate'])) {
			$userInfo['eyeUser'][0]['createDate'][0] = $params['createDate'];
		}
		if (isset($params['group'])) {
			$userInfo['eyeUser'][0]['group'] = array_splice($userInfo['eyeUser'][0]['group'],1);
			if (is_array($params['group'])) {
				$x = 0;
				foreach ($params['group'] as $group) {
					$userInfo['eyeUser'][0]['group'][$x] = $group;
					$x++;
				}
			} else {
				$userInfo['eyeUser'][0]['group'][0] = $params['group'];
			}
		}
	}
	
	$xml = eyeXML('array2xml',array($userInfo,1));
	//TODO: WARNING: SECURITY RISK WITH USERNAME IN XML? 
	$filePath = service_um_getUserFilePath($userInfo['eyeUser'][0]['username']);
	$oldUser = $currentUser;
	$currentUser = ROOTUSER;
	$fp = vfs('real_open',array($filePath,'w'));	
	$currentUser = $oldUser;
	//Error handling
	if(!$fp){
		return false;
	}
	 
	fwrite($fp,$xml);
	fclose($fp);
	return true;
}

/**
* Deletes a user from the system, along with its directory.
* 
* @param $params array(username)
* @param $username Name of the user.
* @return If the function succeeds, returns true. Otherwise, returns
*	false and sets the error code depending on the error
*	occurred.
* @exception INCORRECT_PARAMS No username is specified.
* @date 2008/03/11
*/
function service_um_deleteUser($params = null){
	// Argument handling.
	if ($params == null || empty($params[0])) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	$username = utf8_basename($params[0]);
	if ($username == ROOTUSER) {
		return false;
	}
	
	// Delete the accounts user dir
	$MyDir = um('getUserDir',array($username));
	$result = vfs('real_rmdir',array($MyDir));
	//Error handling. (1)
	if (!$result) {
		return false;
	}
	
	$userDir = service_um_getUserFilePath(array($username));
	$result = vfs('real_delete',array($userDir));
	//Error handling. (2)
	if (!$result) {
		return false;
	}
	
	return true;
}

/*--------------------------------------------------------------------*/

/*--------------------------------------------------------------------*/
/* Logic functions, login logout etc.
/*--------------------------------------------------------------------*/
/**
* Checks if the specified user's credentials are correct.
* 
* @param $params array(username,password)
* @param $username String containing the name of the user.
* @param $password String containing the password of the user.
* @return If the function succeeds, returns true. Otherwise, returns
*	false and sets the error code depending on the error
*	occurred.
* @exception INCORRECT_PARAMS No username or password are specified.
* @date 2008/03/11
*/
function service_um_login($params = null) {
	 
	if($params == null || count($params) < 2){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}	
	$username = utf8_basename($params[0]);
	$password = md5($params[1].md5($params[1]));
	 
	global $currentUser;
	
	//special suid
	$oldUser = $currentUser;
	$currentUser = ROOTUSER;
	//end of special suid
	$info = um('retrieveUser',array($username));
	$currentUser = $oldUser;	
	if(!$info) {
		return false;
	}
	
	if(!is_array($info)) {
	//user not exist
		return false;
	}
	
	if($info['eyeUser'][0]['password'][0] == $password)	{
		foreach($info['eyeUser'][0]['group'] as $value) {
			$_SESSION['groups'][$value] = 1;
		}
		return true;
	}
	return false;
}

/**
* Returns an associative array containing the groups with users logged
* in.
* 
* @return Returns the session variable that stores the group list.
* @date 2008/03/11
*/
function service_um_getCurrentGroups() {
	return $_SESSION['groups'];
}

/**
* Returns a list with all the users registered in the system.
* 
* @return Returns an array containing the names of all the users.
* @date 2008/03/11
*/
function service_um_getAllUsers() {
	$x = 0;
	$dir = EYE_ROOT . '/' . ACCOUNT_DIR . '/';
	if ($open = opendir($dir)) {
		while ($folder = readdir($open)) {
			$dir2 = $dir . $folder;
			if (is_dir($dir2) && $folder != '.' && $folder != '..') {
				if ($open2 = opendir($dir2)) {
					while ($file = readdir($open2)) {
						if (utf8_substr($file,utf8_strlen($file) - 4,utf8_strlen($file)) == '.xml')  {
							$allUsers[$x] = utf8_substr($file,0,utf8_strlen($file) - 4);
							$x++;
						}
					}
				}
			}
		}
	}
	return $allUsers;
}

/**
* Returns the path to the current user's directory.
* 
* @return Returns an string containing the path.
* @date 2008/03/11
*/
function service_um_getCurrentUserDir() {
	global $currentUser;
	if(!$currentUser) { //if something fails, this is secure
		return false;
	}
	return um('getUserDir',array($currentUser));
}

/**
* Checks if the current user is the root user.
* 
* @return Returns a boolean value indicating whether the user is the
*	root user or not.
* @date 2008/03/11
*/
function service_um_checkAdminPermissions()
{
	global $currentUser;
	if($currentUser != ROOTUSER){
		return false;
	}else{
		return true;
	}			
}

/**
* Returns the path of a user's directory.
* 
* @param $params array(username)
* @param $username String containing the name of the user.
* @return If the function succeeds, returns an string with the path to
*	the user's directory. Otherwise, returns false and sets the
*	error code depending on the error occurred.
* @exception INCORRECT_PARAMS No username is specified.
* @date 2008/03/11
*/
function service_um_getUserDir($params=null) {
	if($params == null || count($params) < 1){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}

	$username = utf8_basename($params[0]);
	$userDir = EYE_ROOT.'/'.USERS_DIR.'/'.getAcronim(array($username)).'/'.$username.'/';
	return $userDir;
}

/**
* Returns the path to a user's account directory or the user's
* parameters file inside of it.
* 
* @param $params array(username,[file])
* @param $username String containing the name of the user.
* @param $file If set to 1, appends to the output string the filename of
*	the user's parameters file.
* @return If the $file parameter is set to 1, returns the path to the 
*         XML user's account info file. Else, returns the path to the
*         parent directory of the file.
* @exception INCORRECT_PARAMS No username is specified.
* @date 2008/03/11
*/
function service_um_getUserFilePath($params=null) {
	if($params == null || count($params) < 1){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	$username = $params[0];
	if (isset($params[1]) && $params[1] == 1) {
		return EYE_ROOT . '/' . ACCOUNT_DIR . '/' . getAcronim(array($username)) . '/';
	} else {
		return EYE_ROOT . '/' . ACCOUNT_DIR . '/' . getAcronim(array($username)) . '/' . $username . '.xml';
	}
}

/*--------------------------------------------------------------------*/


/*--------------------------------------------------------------------*/
/* Private functions for this service.
/*--------------------------------------------------------------------*/
/***
* 
* Description: generate the username acronyms used to store users' directories
* 
* Arguments:
* 	+ username: string containing username
* 
* Return: return string with user acronym
*  
* Last update 2007-06-3 
***/
function getAcronim($params){
	 
	$username = $params[0];
	if(!$username) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	$userLenght = utf8_strlen($username);
	//Generate de dir, remove $userDir ? maybe.
	return $username{0}.$username{$userLenght-1}.utf8_substr($userLenght,-1);	 	
}

//TODO: shall we put this function in eyeLib ? 
function recursiveCopy($from,$to) {
	global $currentUser;
	if($currentUser != ROOTUSER) {
		return false;
	}
	if ($gestor = opendir($from)) {
		while (false !== ($archivo = readdir($gestor))) {
			if ($archivo{0} != ".") {
				if(!is_dir($from.'/'.$archivo)) {
					copy($from.'/'.$archivo,$to.'/'.$archivo);
				} else {
					mkdir($to.'/'.$archivo);
					recursiveCopy($from.'/'.$archivo,$to.'/'.$archivo);
				}
			}
		}
		closedir($gestor);
	}
}
?>
