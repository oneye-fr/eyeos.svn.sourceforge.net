<?php
/*
                                  ____   _____ 
                                 / __ \ / ____|
                  ___ _   _  ___| |  | | (___  
                 / _ \ | | |/ _ \ |  | |\___ \ 
                |  __/ |_| |  __/ |__| |____) |
                 \___|\__, |\___|\____/|_____/ 
                       __/ |                   
                      |___/              1.7

                     Web Operating System
                           eyeOS.org

             eyeOS Engineering Team - eyeOS.org/whoarewe

     eyeOS is released under the GNU Affero General Public License Version 3 (AGPL3)
            provided with this release in license.txt
             or via web at gnu.org/licenses/agpl-3.0.txt

        Copyright 2005-2008 eyeOS Team (team@eyeos.org)         
*/

function eyeUpload_on_Message($params="") {
	reqLib('eyeWidgets','updateContent',$params);
}

function eyeUpload_on_upLoadFile($params=null) {
	if(is_object($GLOBALS['upPath'])) {
		$path = $GLOBALS['upPath']->text;
	} else {
		$path = '/';
	}

	$myUserDir = $path;	
	
	if ($GLOBALS['myfile']->checkfile()) {
		if($GLOBALS['myfile']->saveFile($myUserDir)) {
			$GLOBALS['myfile']->notify('correct');
			echo "<div style='font-family: Verdana; font-size: 12pt; margin-left: 30px; margin-top: 20px;'><strong>".htmlspecialchars(i18n('translate',array('Upload finished!')),ENT_QUOTES,'UTF-8')."</strong><br />
    		".htmlspecialchars(i18n('translate',array('You can now close this window.')),ENT_QUOTES,'UTF-8')."</div>";
		} else {
			$GLOBALS['myfile']->notify('error');
		}
		exit;
	} else {
		$GLOBALS['myfile']->notify('error');
		exit;
	}
	exit;
}

function eyeUpload_on_correct($params=null) {
	global $checknum;	
	eyeX('messageBox',array('content'=>'Upload finished!'));	
	$js = 'sendMsg('.$checknum.',"Close","");';
	//eyeX('rawjs',array('js'=>$js));
}

function eyeUpload_on_error($params=null)  {
	eyeX('messageBox',array('content'=>'Error uploading file'));
	$GLOBALS['uploadWND']->close();
	proc('end');
}
function eyeUpload_on_uploadComplete($params=null) {
	if(is_object($GLOBALS['eyeUploadX_upPath_HID'])) {
		$path = $GLOBALS['eyeUploadX_upPath_HID']->text;
	} else {
		$file = service('um','getCurrentUserDir');
		$path = $file.'/'.FILES_USER_DIR;
	}
	$xmlResponse = array('eyeUploadX' => array());
	
	$filename = utf8_basename($_FILES['Filedata']['name']);
	$myUserDir = $path.'/'.$filename;
	if (is_uploaded_file($_FILES['Filedata']['tmp_name'])) {
		$permissionsOk = false;
		if(!vfs('checkPermissions',array($myUserDir))) {
			$xmlResponse['eyeUploadX'][0] = array(
				'status' => array('failed'),
				'message' => array(i18n('translate',array('Error: You don\'t have sufficient permissions')))
			);
		}
		elseif(!vfs('checkQuota',array($_FILES['Filedata']['tmp_name']))) {
			$xmlResponse['eyeUploadX'][0] = array(
				'status' => array('failed'),
				'message' => array(i18n('translate',array('Error: You don\'t have enough disk space')))
			);
		}
		else {
			if (@move_uploaded_file($_FILES['Filedata']['tmp_name'],$myUserDir) && vfs('realToVirtual',array($myUserDir))) {
				$xmlResponse['eyeUploadX'][0] = array(
					'status' => array('success'),
					'message' => array(i18n('translate',array('File %s has been successfully uploaded', array($filename))))
				);
			}
			else {
				$xmlResponse['eyeUploadX'][0] = array(
					'status' => array('failed'),
					'message' => array(i18n('translate',array('Error occured during upload process')))
				);
			}
		}
	}
	else {
		$xmlResponse['eyeUploadX'][0] = array(
			'status' => array('failed'),
			'message' => array(i18n('translate',array('Error occured during upload process')))
		);
	}
	echo eyeXML('array2xml', array($xmlResponse));
	exit;
}

function eyeUpload_on_initFlash() {
	$path = um('getCurrentUserDir').'/'.CONF_USER_DIR.'/eyeUpload/conf.xml';
	$conf = eyeXML('getXMLfile', array($path));
	
	$maxUploadFilesize = ini_get('upload_max_filesize');
	
	header('Content-type: text/xml');
	echo '
			<eyeUploadX>
				<config>
					<upload_max_filesize>'.return_bytes($maxUploadFilesize).'</upload_max_filesize>
				</config>
				<labels>
					<addFiles caption="'.htmlspecialchars(i18n('translate',array('Add files')),ENT_QUOTES,'UTF-8').'" />
					<removeFile caption="'.htmlspecialchars(i18n('translate',array('Remove')),ENT_QUOTES,'UTF-8').'" />
					<upload caption="'.htmlspecialchars(i18n('translate',array('Upload now!')),ENT_QUOTES,'UTF-8').'" />
					<progressInit caption="'.htmlspecialchars(i18n('translate',array('Add files to transfer, then press Upload now!')),ENT_QUOTES,'UTF-8').'" />
					<progressFile caption="'.htmlspecialchars(i18n('translate',array('Transfering: ')),ENT_QUOTES,'UTF-8').'" />
					<maxUploadFilesize caption="'.htmlspecialchars(i18n('translate',array('Max filesize allowed: %s', array($maxUploadFilesize))),ENT_QUOTES,'UTF-8').'" />
				</labels>
			</eyeUploadX>';
	exit;
}

function eyeUpload_on_webDo($params = null) {
	if (is_object($GLOBALS['upPath'])) {
		$path = $GLOBALS['upPath']->text;
	}
	$file = $GLOBALS['eyeUpload_web_textbox']->text;
	$path = $path . '/' . basename($file);
	
	$httpClient = eyeURL('getHTTPClient');
	$httpClient->setURL($file);
	$httpClient->sendRequest();
	
	$countFiles = 0;
	while (vfs('fileExists',array($path))) {
		$pathInfo = utf8_pathinfo($path);
		$extension = $pathInfo['extension'];
		if (!$countFiles) {
			$pathTemp = utf8_substr($path,0,utf8_strlen($path) - utf8_strlen($extension) - 1);
		} else {
			$pathTemp = utf8_substr($path,0,utf8_strlen($path) - utf8_strlen($extension) - 1);
			$pathTemp = utf8_substr($path,0,utf8_strlen($pathTemp) - utf8_strlen(strrchr($pathTemp,'_')));
		}
		$countFiles++;
		$path = $pathTemp . '_' . $countFiles . '.' . $extension;
	}
	
	vfs('create',array($path));
	if (vfs('writeFile',array($path,$httpClient->getResponseBody()))) {
		eyex('messageBox',array('content' => 'File uploaded successfully.'));
	} else {
		eyex('messageBox',array('content' => 'Error uploading file!'));
	}
	$GLOBALS['eyeUpload_web_textbox']->setText('');
}

function eyeUpload_on_Close(){
	eyeX('rawjs',array('js'=>$GLOBALS['upCallback']->text));
	proc('end');	
}

//Source: php.net
function return_bytes($val) {
    $val = trim($val);
    $last = strtolower($val{strlen($val)-1});
    switch($last) {
        case 'g':
            $val *= 1024;
        case 'm':
            $val *= 1024;
        case 'k':
            $val *= 1024;
    }
    return $val;
}

?>