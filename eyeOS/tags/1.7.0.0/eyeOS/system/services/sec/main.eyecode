<?php
/*
                                  ____   _____ 
                                 / __ \ / ____|
                  ___ _   _  ___| |  | | (___  
                 / _ \ | | |/ _ \ |  | |\___ \ 
                |  __/ |_| |  __/ |__| |____) |
                 \___|\__, |\___|\____/|_____/ 
                       __/ |                   
                      |___/              1.7

                     Web Operating System
                           eyeOS.org

             eyeOS Engineering Team - eyeOS.org/whoarewe

     eyeOS is released under the GNU Affero General Public License Version 3 (AGPL3)
            provided with this release in license.txt
             or via web at gnu.org/licenses/agpl-3.0.txt

        Copyright 2005-2008 eyeOS Team (team@eyeos.org)

*/
/*
	EyeOS security service
*/

function service_sec_init($params = null) {

}

/**
* Cleans a desired string, allowing the possibility to eliminate newline
* and carriage return characters, replacing HTML special characters to
* entities or adjusting the string to a given length.
* 
* @param $params array(var,[maxLen],[nohtml],[noreturn])
* @param $var String to be cleaned.
* @param $maxLen If set, limits the length of the string to the specified
*	value.
* @param $nohtml If set, converts the special characters to HTML entities.
* @param $noreturn If set, eliminates all carriage return and newline
*	characters.
* @return Returns the string with the specified clean methods applied.
* @date 2008/03/11
*/
function service_sec_cleanOutPutString($params) {
	if(!isset($params['var'])) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	$string = $params['var'];
	
	if(isset($params['nohtml'])) {
		$string = htmlspecialchars($string,ENT_QUOTES);
	}
	if(isset($params['maxLen']) && is_numeric($params['maxLen']) && $params['maxLen'] > 0) {
		if(utf8_strlen($string) > $params['maxLen']) {
			$string = utf8_substr($string,0,$params['maxLen']);
		}
	}
	if(isset($params['noreturn'])) {
		$string = str_replace("\n",'',$string);
		$string = str_replace("\r",'',$string);
	}
	return $string;
}

/**
* Unsets the global variables and performs a cleanup of predefined PHP
* variables _POST, _GET, _REQUEST and _COOKIE.
* 
* @return This function does not return any value.
* @date 2008/03/11
*/
function service_sec_start($params=null){
	if (ini_get('register_globals')) {
	    $rg = array_keys($_REQUEST);
	    foreach($rg as $var) {
	        if ($_REQUEST[$var] === $$var) {
	            unset($$var);
	        }
	    }
	}
	
	if (@get_magic_quotes_gpc() == 1) {
		$_POST =multidimensionalArrayMap('stripslashes', $_POST);
		$_REQUEST =multidimensionalArrayMap('stripslashes', $_REQUEST);
		$_GET = multidimensionalArrayMap('stripslashes', $_GET);
		$_COOKIE = multidimensionalArrayMap('stripslashes', $_COOKIE);
	}
}

function multidimensionalArrayMap($func, $arr) {
	$newArr = array();
	foreach($arr as $key => $value) {
		$newArr[ $key ] = (is_array($value) ? multidimensionalArrayMap($func, $value) : $func($value));
	}
	return $newArr;
}

?>