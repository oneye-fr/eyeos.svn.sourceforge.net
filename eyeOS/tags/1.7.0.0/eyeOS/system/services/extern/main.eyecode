<?php
/*
                                  ____   _____ 
                                 / __ \ / ____|
                  ___ _   _  ___| |  | | (___  
                 / _ \ | | |/ _ \ |  | |\___ \ 
                |  __/ |_| |  __/ |__| |____) |
                 \___|\__, |\___|\____/|_____/ 
                       __/ |                   
                      |___/              1.7

                     Web Operating System
                           eyeOS.org

             eyeOS Engineering Team - eyeOS.org/whoarewe

     eyeOS is released under the GNU Affero General Public License Version 3 (AGPL3)
            provided with this release in license.txt
             or via web at gnu.org/licenses/agpl-3.0.txt

        Copyright 2005-2008 eyeOS Team (team@eyeos.org)

*/
/*
	eyeOS external files service
*/
/*
	extern service is the way to get files, like css, js and images ignoring the EYE_ROOT content
	because EYE_ROOT can change in each installation, and should be "secret"
*/

define('MAX_FILE_EXTENSION',8);
define('MAX_FILE_NAME_LEN',40);

function service_extern_init($params = '') {
	global $externRequest;
	$externRequest = true;
	
	$version = CACHE_VERSION;
	$config = eyeXML('getXMLconfig',array('eyex','eyex.xml'));
	if ($config && $config['changes'][0]['times'][0]) {
		$version += $config['changes'][0]['times'][0];
	}
	define('EXTERN_CACHE_VERSION',$version);
}
/**
* Retrieves a file located in the eyeOS extern directory.
* 
* @param $params array(path,type)
* @param $path Path to the file inside the extern directory.
* @param $type Type of resource. Possible type values are:
    				image:
*	used for loading images
    				download: used to force the
*	downloading of a file
    				css: used for loading CSS
*	files
    				swf: used for loading Flash (.swf) files
   
*					dynamic: used for files ending with EYE_CODE_EXTENSION
*	(by default '.eyecode'). The code of the files will be
*	loaded, executing the get_dynamic_content function and
*	returning its result. 
* @return This function does not return any value.
* @date 2008/03/11
*/
function service_extern_getFile($params) {	
	if(!isset($params[0])){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	
	$forceNoCache == false;
	if (!empty($_REQUEST['nocache'] ) && $_REQUEST['nocache'] == '1') {
		$forceNoCache == true;
	}
	
	if ($_REQUEST['theme']) {
		$params[0] = EYE_ROOT . '/' . EXTERN_DIR . '/' . THEMES_DIR . '/default/' . $params[0];
	} else {
		$params[0] = EYE_ROOT . '/' . EXTERN_DIR . '/' . $params[0];
	}
	$myPath = eyex('getThemeImage',array($params[0],3));
	
	if (!$myPath) {
		return false;
	}
	
// get path information
	$info = utf8_pathinfo($myPath);
	$type = $params[1];
	$myDir = $info['dirname'];
	$myFile = $info['basename'];
	$myExt = $info['extension'];
	
// protect against header tricks
	$myExt = str_replace("\n",'',$myExt);
	$myExt = str_replace("\r",'',$myExt);
	$myFile = str_replace("\n",'',$myFile);
	$myFile = str_replace("\r",'',$myFile);
	
// check lengths
	if(utf8_strlen($myExt) > MAX_FILE_EXTENSION) {
		return false;
	}
	if(utf8_strlen($myFile > MAX_FILE_NAME_LEN)) {
		return false;
	}
	
// check if an extern file is called
	if (utf8_strpos(realpath($myDir),realpath(EYE_ROOT . '/' . EXTERN_DIR . '/')) !== 0) {
		return false;
	}
	
// set headers
	$myFile = $myDir.'/'.$myFile;
	$cacheReplace = false;
	if(is_readable($myFile)) {		
		$len = filesize($myFile);		
		if($type == 'text' || $myExt == 'js') {
			header("Content-type: text/plain");
		} elseif($myExt == 'htm' || $myExt == 'html' || $myExt == 'xhtml') {
			header("Content-type: text/html");
		} elseif ($type == 'image' || $myExt == 'png' || $myExt == 'jpg' || $myExt == 'gif') {
			header('Content-Type: image/'.$myExt);
		} elseif ($type == 'download') {
			header('Content-Type: application/force-download');
			header("Content-Description: File Transfer");
			header('Content-Disposition: attachment; filename="'.$myFile.'"');
		} elseif ($type == 'css' || $myExt == 'css') {
			header("Content-type: text/css");
			$cacheReplace = true;
		} elseif ($type == 'xml' || $myExt == 'xml' || $myExt == 'xsl') {
			header("Content-type: text/xml");
		} elseif($type == 'swf'  || $myExt == 'swf'){
			header("Content-type: application/x-shockwave-flash");
		} else if($type == 'mp3' || $myExt == 'mp3') {
			header('Content-type: audio/mpeg3');
		} elseif($type == 'dynamic') {
			include_once($myFile);
			if(function_exists('get_dynamic_content')) {
				$return = get_dynamic_content($_GET['params']);
				$len = strlen($return);
			}
		}
		header("Content-Length: $len");
		header("Accept-Ranges: bytes");
		header("X-Pad: avoid browser bug");
		if($type == 'dynamic') {
			echo $return;
		} else {
			// eyeCache original by Matthew Francis-Landau 
			// currently maintained and self rewritten by the eyeOS Team
			if(EXTERN_CACHE == 1 && $forceNoCache == false)
			{
				$ftime = filemtime($myFile);
				$date = gmdate('D, d M Y H:i:s',0).' GMT';
				if(isset($_SERVER['HTTP_IF_MODIFIED_SINCE']) && $_SERVER['HTTP_IF_MODIFIED_SINCE'] == $date)
				{
					header("HTTP/1.0 304 Not Modified");
					exit;
				}

				header("Last-Modified: $date");
				$date = gmdate('D, d M Y H:i:s',2147483647).' GMT';
				header("Expires: $date");

				if($cacheReplace == true && EXTERN_CACHE_MANUAL == 0){
					$contents = file_get_contents($myFile);
					$search = 'version=EXTERN_CACHE_VERSION';
					if(strpos($contents,$search)){
						$replace = 'version='.EXTERN_CACHE_VERSION;
						$contents = str_replace($search,$replace,$contents);
					}
					//I don't like to put this return here, but css is the only exception...
					echo $contents;
					return true;
				}
			}
			//If the cache is enabled, the headers should be changed
			readfile($myFile);
		}
	} 
}
