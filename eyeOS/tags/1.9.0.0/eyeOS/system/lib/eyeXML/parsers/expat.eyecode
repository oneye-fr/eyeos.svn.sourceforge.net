<?php
/*
                                  ____   _____
                                 / __ \ / ____|
                  ___ _   _  ___| |  | | (___
                 / _ \ | | |/ _ \ |  | |\___ \
                |  __/ |_| |  __/ |__| |____) |
                 \___|\__, |\___|\____/|_____/
                       __/ |
                      |___/              1.9

                     Web Operating System
                           eyeOS.org

             eyeOS Engineering Team - www.eyeos.org/team

     eyeOS is released under the GNU Affero General Public License Version 3 (AGPL3)
            provided with this release in license.txt
             or via web at gnu.org/licenses/agpl-3.0.txt

        Copyright 2005-2009 eyeOS Team (team@eyeos.org)
*/

/*
	XML library for eyeOS 
*/
function lib_eyeXML_xml2array($params){
	if(!isset($params[0])){
		return false;
	}

	$GLOBALS['genArray'] = array();
	$GLOBALS['tmpArray'] = array();
	$GLOBALS['oldArray'] = array();

	$GLOBALS['counter'] = null;

	$minPos = utf8_strpos($params[0],'<')+1;
	if($params[0]{$minPos} == '?'){
		$params[0] = str_replace('?>','?><xmlContainer>',$params[0]);
	}else{
		$params[0] = '<xmlContainer>'.$params[0];
	}
	$params[0] = $params[0].'</xmlContainer>';
	//Creaing the parser, nothing special here...
	$parser = xml_parser_create('UTF-8');
	//Setting the needed option to be compatible with the old function
	xml_parser_set_option($parser,XML_OPTION_CASE_FOLDING,0);
	//Setting start and end element handler
	xml_set_element_handler($parser,'expat_eyeXML_startElementHandler','expat_eyeXML_endElementHandler');
	//
	xml_set_character_data_handler($parser,'expat_eyeXML_characterDataHandler');
	xml_parse($parser,$params[0]);
	xml_parser_free($parser);

	return $GLOBALS['genArray']['xmlContainer'][0];
}
function expat_eyeXML_startElementHandler($parser,$name,$attrib){
	global $counter;
	if(!isset($counter)){
		$counter = 0;//We are in the first node
		$GLOBALS['genArray'][$name] = array(array());
		$GLOBALS['tmpArray'] = &$GLOBALS['genArray'][$name][0];
		$GLOBALS['oldArray'][$counter] = &$GLOBALS['genArray'][$name][0];
	}else{
		$counter++;//OK let's go guys, we are going to the next node
		if(empty($GLOBALS['tmpArray'])){
			$GLOBALS['tmpArray'][$name] = array('');
			$GLOBALS['tmpArray'] = &$GLOBALS['tmpArray'][$name][0];
			$GLOBALS['oldArray'][$counter] = &$GLOBALS['tmpArray'];
		}else{;
			if(count($GLOBALS['tmpArray'][$name]) == 1){
				$GLOBALS['tmpArray'][$name][1] = '';
				$GLOBALS['tmpArray'] = &$GLOBALS['tmpArray'][$name][1];
				$GLOBALS['oldArray'][$counter] = &$GLOBALS['tmpArray'];
			}else{
				if(!empty($GLOBALS['tmpArray'][$name])){
					$zIndex = count($GLOBALS['tmpArray'][$name]);
					$GLOBALS['tmpArray'][$name][$zIndex];
					$GLOBALS['tmpArray'] = &$GLOBALS['tmpArray'][$name][$zIndex];
					$GLOBALS['oldArray'][$counter] = &$GLOBALS['tmpArray'];
				}else{
					$GLOBALS['tmpArray'][$name] = array('');
					$GLOBALS['tmpArray'] = &$GLOBALS['tmpArray'][$name][0];
					$GLOBALS['oldArray'][$counter] = &$GLOBALS['tmpArray'];
				}
			}
		}
	}
}

function expat_eyeXML_endElementHandler($parser,$name){
	global $counter;
	unset($GLOBALS['oldArray'][$counter]);
	$counter--;
	$GLOBALS['tmpArray'] = &$GLOBALS['oldArray'][$counter];
	unset($GLOBALS['concatData']);
}
function expat_eyeXML_characterDataHandler($parser,$data){
 	$data = utf8_rtrim($data,"\t\n\r");
	if($data != ''){
		if($GLOBALS['concatData']){
			$GLOBALS['concatData'] .=  '&'.$data;
		}else{
			if(empty($GLOBALS['tmpArray'])){
				$GLOBALS['tmpArray'] = $data;
				$GLOBALS['concatData'] = &$GLOBALS['tmpArray'];
			}else{
				echo "This conditional shouldn't be accesed";exit;
				$index = count($GLOBALS['tmpArray']);
				$GLOBALS['tmpArray'][$index] = $data;
				$GLOBALS['concatData'] = &$GLOBALS['tmpArray'][$index];
			}
		}
	}
}

//TO BE PORTED
function lib_eyeXML_array2xml($params){
	if(!isset($params[0])){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	$myArray = $params[0];
	if(!isset($myArray)) {
		return false;
	}
	if(isset($params[1]) && $params[1] == 1) {
		return lib_eyeXML_getXmlHeader().getArrayText($myArray,-1,1);
	}
	return getArrayText($myArray);
}

/**
* Returns a string containing a XML tag with a value inside.
* 
* @param $params array(master,content)
* @param $master Name of the XML tag.
* @param $content Value inside the tag.
* @return Returns the result of embedding the value 'content' inside
*	the tag 'master'.
* @date 2008/03/11
*/
function lib_eyeXML_append($params) {
	if(!isset($params[0]) || !isset($params[1])){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	$master = $params[0];
	$content = $params[1];
	return "<$master>$content</$master>\n";
}

function getArrayText($array,$tabs = -1) {
	$tabs++;
	// foreach for the key
	foreach ($array as $key => $value) {
		// html encode the key
		$key = htmlspecialchars($key,ENT_NOQUOTES,'UTF-8');
		$key = str_replace('?','&#63;',$key);
		$key = str_replace('!','&#33;',$key);
		$key = str_replace(' ','&nbsp;',$key);
		$key = str_replace('/','&#47;',$key);
		if (is_array($value)) {
			// foreach for the value
			foreach ($value as $current) {
				// return + key-begin
				$return .= utf8_str_pad('',$tabs,"\t") . '<' . $key . '>';
				// if array continue
				if (is_array($current)) {
					$return .= "\n" . getArrayText($current,$tabs) . "\n" . utf8_str_pad('',$tabs,"\t");
				} else {
					// return + html encoded value
					$return .= htmlspecialchars($current,ENT_NOQUOTES,'UTF-8');
				}
				// return + key-end
				$return .= '</' . $key . '>' . "\n";
			}
		}
	}
	return utf8_trim($return,"\n");
}

function getNodeContent($content) {
	$content_old = $content;
	// set content and end 
	$content = strstr($content,'<');
	$end = strstr($content,'>');
	if (!$content || !$end) {
		// if content and end are not set return value (content old)
		return html_entity_decode($content_old,ENT_QUOTES,'UTF-8');
	}
	// while content and end are set continue
	while ($content && $end) {
		// full tag: a href="http://eyeos.org/"
		$full_tag = utf8_substr($content,1,-utf8_strlen($end));
		if (utf8_strpos($full_tag,' ')) {
			// tag: a
			$tag = utf8_substr($full_tag,0,utf8_strpos($full_tag,' '));
		} else {
			$tag = $full_tag;
		}
		// if the Tag is </a> or the Full Tag is <img src="eyeos.png" />
		if ($tag{0} == '/' || $full_tag{utf8_strlen($full_tag) - 1} == '/') {
			$content = utf8_substr($end,1);
		// if the Tag is < ?xml version="1.0" encoding="UTF-8" ? >
		} elseif ($tag{0} == '?') {
			$content = utf8_substr(strstr($content,'?>'),2);
		// if the Tag is <!--  Not this! -->
		} elseif (utf8_substr($tag,0,3) == '!--') {
			$content = utf8_substr(strstr($content,'-->'),3);
		// if the Tag is okay
		} else {
			// get tag end
			$tag_end = strstr($content,'</' . $tag . '>');
			// get tag content
			$tag_content = utf8_substr($end,1,utf8_strlen($end) - 1 - utf8_strlen($tag_end));
			$tag_end = utf8_substr($tag_end,utf8_strlen('</' . $tag . '>'));
			// check for all sub Tags with the same key; If tag end is nothing break
			while ((substr_count($tag_content,'<' . $tag . '>') + substr_count($tag_content,'<' . $tag . ' ') - substr_count($tag_content,'</' . $tag . '>')) && utf8_strpos($tag_end,'</' . $tag . '>')) {
				// get tag end
				$tag_end = strstr($tag_end,'</' . $tag . '>');
				// get tag content
				$tag_content = utf8_substr($end,1,utf8_strlen($end) - 1 - utf8_strlen($tag_end));
				$tag_end = utf8_substr($tag_end,utf8_strlen('</' . $tag . '>'));
			}
			$content = $tag_end;
			// set array entry for the tag
			$tag = html_entity_decode($tag,ENT_QUOTES,'UTF-8');
			$return[$tag][] = getNodeContent($tag_content);
		}
		// set content and end 
		$content = strstr($content,'<');
		$end = strstr($content,'>');
	}
	return $return;
}
?>