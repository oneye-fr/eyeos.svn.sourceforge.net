<?php
/*
                                  ____   _____
                                 / __ \ / ____|
                  ___ _   _  ___| |  | | (___
                 / _ \ | | |/ _ \ |  | |\___ \
                |  __/ |_| |  __/ |__| |____) |
                 \___|\__, |\___|\____/|_____/
                       __/ |
                      |___/              1.8

                     Web Operating System
                           eyeOS.org

             eyeOS Engineering Team - www.eyeos.org/team

     eyeOS is released under the GNU Affero General Public License Version 3 (AGPL3)
            provided with this release in license.txt
             or via web at gnu.org/licenses/agpl-3.0.txt

        Copyright 2005-2009 eyeOS Team (team@eyeos.org)
*/

/*
	Split widget abstraction
*/

define('SPLIT_VERTICAL',1);
define('SPLIT_HORIZONTAL',2);

class Split {
	//pid controller
	
	var $creatorPid;
	//global widgets options without default
	var $name;
	var $father;

	//generic widget options with default
	var $x;
	var $y;
	var $horiz;
	var $vert;
	var $cent;
	var $visible;
	
	var $showed = 0;
	
	//custom widget options
	var $width;
	var $height;
	var $orientation;
	var $position;
	var $sendResizeMsg;
	var $sigResize;
	
	function Split($params) {	
		global $myPid;
		$this->creatorPid = $myPid;
		//generic widget options without default
		$this->name = $params['name'];
		$this->father = $params['father'];

		//generic widget options with default
		isset($params['horiz']) ? $this->horiz = $params['horiz'] : $this->horiz = 0;
		isset($params['vert']) ? $this->vert = $params['vert'] : $this->vert = 0;
		isset($params['cent']) ? $this->cent = $params['cent'] : $this->cent = 0;
		isset($params['x']) ? $this->x = $params['x'] : $this->x = 20;
		isset($params['y']) ? $this->y = $params['y'] : $this->y = 20;
		isset($params['visible']) ? $this->visible = $params['visible'] : $this->visible = 1;
		
		//especific window options
		isset($params['width']) ? $this->width = $params['width'] : $this->width = 200;
		isset($params['height']) ? $this->height = $params['height'] : $this->height = 200;
		isset($params['orientation']) ? $this->orientation = $params['orientation'] : $this->orientation = SPLIT_VERTICAL;
		if($this->orientation == SPLIT_VERTICAL) {
			isset($params['position']) ? $this->position = $params['position'] : $this->position = $this->width/2;
		} else {
			isset($params['position']) ? $this->position = $params['position'] : $this->position = $this->height/2;
		}
		isset($params['sendResizeMsg']) ? $this->sendResizeMsg = $params['sendResizeMsg'] : $this->sendResizeMsg = 0;
		isset($params['sigResize']) ? $this->sigResize = $params['sigResize'] : $this->sigResize = 'splitResize';
	}
	
	//event handling
	function addEvent($eventName,$eventFunc,$args="") {
		global $myPid;
		$name = $myPid.'_'.$this->name;
		if($this->showed == 0) {
			$this->show();
		}
		service('eyex','addEvent',array('name' => $name, 'action' => $eventFunc, 'event' => $eventName,'args'=>$args));
	}

	function show($noserialize=1) {
		if($this->title) {
			$this->title = i18n('translate',array($this->title));
		}
		$widgetsparams = array(
			'visible' => $this->visible,
			'height' => $this->height,
			'width' => $this->width,
			'orientation' => $this->orientation,
			'position' => $this->position,
			'sigResize' => $this->sigResize,
			'sendResizeMsg' => $this->sendResizeMsg
		);
		$widgetsparams = service("mmap","array2js",array($widgetsparams));
		
		$mySplit = array(
			'name' => $this->name,
			'x' => $this->x,
			'y' => $this->y,
			'horiz' => $this->horiz,
			'vert' => $this->vert,
			'father' => $this->father,
			'widgetname' => 'Split',
			'params' => $widgetsparams,
			'center' => $this->cent
		);
		$this->showed=1;
		service('eyex','createWidget',$mySplit);
		if($noserialize == 0) {
			reqLib('eyeWidgets','serialize',array($this));
		}
	}
		
	function setCss($params) {
		global $myPid;
		if(is_array($params)) {
			foreach($params as $key => $value) {
				service('eyex','updateCss',array('name' => $myPid.'_'.$this->name,'property' => $key,'value' => $value));
			}
		}
	}
	
	function hide() {
		global $myPid;
		$this->visible = 0;
		service('eyex','rawjs',array('js' => 'document.getElementById("'.$myPid.'_'.$this->name.'_Container").style.display="none"'));
	}
	
	function unhide() {
		global $myPid;
		$this->visible = 1;
		service('eyex','rawjs',array('js' => 'document.getElementById("'.$myPid.'_'.$this->name.'_Container").style.display="block"'));
	}
	
	function setX($x) {
		global $myPid;
		$this->x = intval($x);
		service('eyex','rawjs',array('js' => 'document.getElementById("'.$myPid.'_'.$this->name.'_Container").style.left="'.$this->x.'px";'));
	}
	
	function setY($y) {
		global $myPid;
		$this->y = intval($y);
		service('eyex','rawjs',array('js' => 'document.getElementById("'.$myPid.'_'.$this->name.'_Container").style.top="'.$this->y.'px";'));
	}
	
	function setHeight($height) {
		global $myPid;
		$oldHeight = $this->height;
		$this->height = intval($height);
		if($this->orientation == SPLIT_VERTICAL) {
			service('eyex','rawjs',array('js' => 'document.getElementById("'.$myPid.'_'.$this->name.'_split").style.height="'.$this->height.'px";'));
			service('eyex','rawjs',array('js' => 'document.getElementById("'.$myPid.'_'.$this->name.'_splitter").style.height="'.$this->height.'px";'));
			service('eyex','rawjs',array('js' => 'document.getElementById("'.$myPid.'_'.$this->name.'_first").style.height="'.$this->height.'px";'));
			service('eyex','rawjs',array('js' => 'document.getElementById("'.$myPid.'_'.$this->name.'_last").style.height="'.$this->height.'px";'));
		} else {
			$diff = $this->height-$oldHeight;
			$js = 'increaseHeight("'.$myPid.'_'.$this->name.'_last",'.$diff.');';
			service('eyex','rawjs',array('js' => 'document.getElementById("'.$myPid.'_'.$this->name.'_split").style.height="'.$this->height.'px";'));
			service('eyex','rawjs',array('js' => $js));
		}
	}
	
	function setPosition($position) {
		global $checknum;
		global $myPid;
		$js = 'splitter_setPosition("'.$myPid.'_'.$this->name.'",'.intval($position).','.$this->orientation.','.$checknum.',"'.$this->sigResize.'");';
		service('eyex','rawjs',array('js' => $js));
	}
	
	function hideSplitter() {
		global $myPid;
		service('eyex','rawjs',array('js' => 'document.getElementById("'.$myPid.'_'.$this->name.'_splitter").style.display="none"'));
	}
	
	function showSplitter() {
		global $myPid;
		service('eyex','rawjs',array('js' => 'document.getElementById("'.$myPid.'_'.$this->name.'_splitter").style.display="block"'));
	}
	
	function setWidth($width) {
		global $myPid;
		$oldWidth = $this->width;
		$this->width = intval($width);
		if($this->orientation == SPLIT_HORIZONTAL) {
			service('eyex','rawjs',array('js' => 'document.getElementById("'.$myPid.'_'.$this->name.'_split").style.width="'.$this->width.'px";'));
			service('eyex','rawjs',array('js' => 'document.getElementById("'.$myPid.'_'.$this->name.'_splitter").style.width="'.$this->width.'px";'));
			service('eyex','rawjs',array('js' => 'document.getElementById("'.$myPid.'_'.$this->name.'_first").style.width="'.$this->width.'px";'));
			service('eyex','rawjs',array('js' => 'document.getElementById("'.$myPid.'_'.$this->name.'_last").style.width="'.$this->width.'px";'));
		} else {
			$diff = $this->width-$oldWidth;
			$js = 'increaseWidth("'.$myPid.'_'.$this->name.'_last",'.$diff.');';
			service('eyex','rawjs',array('js' => 'document.getElementById("'.$myPid.'_'.$this->name.'_split").style.width="'.$this->width.'px";'));
			service('eyex','rawjs',array('js' => $js));
		}
	}
	
	function remove() {
		global $myPid;
		$name = $this->name;
		service('eyex','removeWidget',array('name'=>$name.'_Container'));
		eyeWidgets('singleUnserialize',array($this->name));
	}
	
}
?>