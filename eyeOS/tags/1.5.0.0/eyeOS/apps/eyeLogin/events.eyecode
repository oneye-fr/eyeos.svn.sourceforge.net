<?php
/*
                                  ____   _____ 
                                 / __ \ / ____|
                  ___ _   _  ___| |  | | (___  
                 / _ \ | | |/ _ \ |  | |\___ \ 
                |  __/ |_| |  __/ |__| |____) |
                 \___|\__, |\___|\____/|_____/ 
                       __/ |                   
                      |___/              1.2

                     Web Operating System
                           eyeOS.org

             eyeOS Engineering Team - eyeOS.org/whoarewe

     eyeOS is released under the GNU General Public License Version 3 (GPL3)
            provided with this release in license.txt
             or via web at gnu.org/licenses/gpl.txt

        Copyright 2005-2008 eyeOS Team (team@eyeos.org)         
*/
/*
	events resource for eyeLogin 
*/


function eyeLogin_on_Message($params="") {
	reqLib('eyeWidgets','updateContent',$params);
}

function eyeLogin_on_doLogin($params="") {
	global $currentUser;
	global $myPid;
	global $checknum;
	$myUsername = $GLOBALS['eyeLogin_Username']->text;
	$myPassword = $GLOBALS['eyeLogin_Password']->text;
	if(service('um','login',array($myUsername,$myPassword))) {
		$currentUser = $myUsername;
		service('proc','setProcessUser',array($myPid));
		service('eyex','rawjs',array('js' => 'eyeLogin_successLogin("'.service('sec','cleanOutPutString',array('var'=>$myUsername,'noreturn' =>1,'nohtml' =>1)).'","'.$checknum.'","'.$myPid.'");'));
	} else {
		service('eyex','rawjs',array('js' => 'eyeLogin_badLogin("'.service('sec','cleanOutPutString',array('var'=>$myUsername,'noreturn' =>1,'nohtml' =>1)).'","'.service('sec','cleanOutPutString',array('var'=>$myPassword,'noreturn' =>1,'nohtml' =>1)).'","'.$checknum.'","'.$myPid.'");'));
	}
}

function eyeLogin_on_successLogin($params=null) {
	global $currentUser;	
	loadConfig('eyeLogin');
	$pid = service('proc','findPidByName',array('eyeX'));
	service('proc','setProcessUser',array($pid)); //set eyeX to the currentUser
	proc('end');
	$tokens = array($currentUser,EYEOS_HOSTNAME);
	service('eyex','runjs',array('js'=>"document.title =  %s +'@'+ %s ;",'tokens'=>$tokens));
	$udir = um('getCurrentUserDir');
	$xml = eyeXML('getXMLfile',array($udir.'/conf/i18n/lang.xml'));	
	if(is_array($xml)) {
		$lang = $xml['lang'][0];
	} else {
		$lang = 'en';
	}
	i18n('setLang',array($lang));	
	service('proc','launch',array(LOGIN_EXECUTE,'autorun'));
}

function eyeLogin_on_doCreateUser($params="") {
	
	if(ALLOW_USER_REGISTER != 1) {
		if(is_object($GLOBALS['eyeLogin_HiddenLabel'])) {
			$GLOBALS['eyeLogin_HiddenLabel']->setText("This system does not allow user registration");
		}
		return;
	}
	global $myPid;
	global $checknum;
	$myUsername = $GLOBALS['eyeLogin_newUser']->text;
	$pass1 = $GLOBALS['eyeLogin_Pass1']->text;
	$pass2 = $GLOBALS['eyeLogin_Pass2']->text;

	if(!$myUsername || !$pass1 || !$pass2) {
		$GLOBALS['eyeLogin_HiddenLabel']->setText("Sorry, you must provide username and password");
		$GLOBALS['eyeLogin_newUser']->setText("");
		$GLOBALS['eyeLogin_Pass1']->setText("");
		$GLOBALS['eyeLogin_Pass2']->setText("");
		return false;
	}
	
	if($pass1 != $pass2) {
		$GLOBALS['eyeLogin_HiddenLabel']->setText("Password fields do not match");
		$GLOBALS['eyeLogin_Pass1']->setText("");
		$GLOBALS['eyeLogin_Pass2']->setText("");
		return false;
	}
	
	$lang = $GLOBALS['eyeLogin_selectLang']->selected;
	
	if(!$lang || empty($lang)){
		$GLOBALS['eyeLogin_HiddenLabel']->setText("Sorry, language is needed");
		$GLOBALS['eyeLogin_Pass1']->setText("");
		$GLOBALS['eyeLogin_Pass2']->setText("");
		return false;
	}
	
	$tmpLangs = $_SESSION['tmpLangs'];	
	foreach($tmpLangs as $tmpLang){
		if($lang == $tmpLang[1]){
			$exists = true;
			break;
		}
	}
	
	if(!$exists){
		$GLOBALS['eyeLogin_HiddenLabel']->setText("The language does not exist");
		$GLOBALS['eyeLogin_Pass1']->setText("");
		$GLOBALS['eyeLogin_Pass2']->setText("");
		return false;	
	}
	
	if(utf8_strlen($pass1) < 4) {
		$GLOBALS['eyeLogin_HiddenLabel']->setText("Password is too short");
		return false;
	}
	
	if(utf8_strlen($myUsername) < 2) {
		$GLOBALS['eyeLogin_HiddenLabel']->setText("Username is too short");
		return false;
	}
	
	if (!preg_match("/^[-_a-zA-Z0-9]+$/", $myUsername)) {
		$GLOBALS['eyeLogin_HiddenLabel']->setText("Error: username should be alpha-numeric");
		return false;
	}
	
	global $currentUser;
	$oldUser = $currentUser;
	$currentUser = ROOTUSER;
	if(service('um','userExist',array($myUsername))) {
		$currentUser = $oldUser;
		$GLOBALS['eyeLogin_HiddenLabel']->setText("That user already exists");
		$GLOBALS['eyeLogin_newUser']->setText("");
		return false;
	}
	
	if(service('um','createUser',array('username' => $myUsername,'password' => $pass1))) {
		//Getting the lang.xml
		$dir = um('getUserDir',array($myUsername));
		$dir = $dir.'/'.CONF_USER_DIR.'/i18n/lang.xml';
		$data = eyeXML('getXMLfile',array($dir));
		//Setting the register language (if the user don't select any it will be the default language		
		$data['lang'][0] = $lang;
		//Saving...
		eyeXML('setXMLfile',array($dir,$data));
		//restoring user...
		$currentUser = $oldUser;
		service('eyex','rawjs',array('js'=>"eyeLoginCleanWindow($myPid);"));
		//we don't need any more
		unset($_SESSION['tmpLangs'][0]);
		$GLOBALS['eyeLogin_HiddenLabel2']->setText("User created successfully. Please login.");
		$GLOBALS['eyeLogin_HiddenLabel2']->setY(80);
		$GLOBALS['eyeLogin_HiddenLabel']->setText('');
	} else {
		$currentUser = $oldUser;
		$GLOBALS['eyeLogin_HiddenLabel']->setText("Error creating new user");
	}
}

?>
