<?php
/*
                                  ____   _____ 
                                 / __ \ / ____|
                  ___ _   _  ___| |  | | (___  
                 / _ \ | | |/ _ \ |  | |\___ \ 
                |  __/ |_| |  __/ |__| |____) |
                 \___|\__, |\___|\____/|_____/ 
                       __/ |                   
                      |___/              1.0

                     Web Operating System
                           eyeOS.org

             eyeOS Engineering Team - eyeOS.org/whoarewe

     eyeOS is released under the GNU General Public License (GPL)
            provided with this release in license.txt
             or via web at gnu.org/licenses/gpl.txt

        Copyright 2005-2007 eyeOS Team (team@eyeos.org)

*/
/*
	uniform resource locator abstraction library for eyeOS
*/

define('MAX_READ_SIZE',1048576); //1MB
define('EYEOS_USER_AGENT','eyeOS 1.0');

function lib_eyeURL_getRawFile($params) {
	$url = $params['url'];
	if(!$url) {
		return false;
	}
	
	preg_match ('/^\\s*(?:\\w+:\\/{2})?(.*?)(:\\d+)?(\\/.*)$/',$url, $matches);
	$host = $matches[1];
	$port = $matches[2];
	$path = $matches[3];

	if(!$port) {
		$port = 80;
	}
	
	if(!$path) {
		$path = '/';
	}
	$socket = fsockopen($host, $port);
    if (!$socket) {
		return false;
    }
	fwrite ($socket, "GET $path HTTP/1.1\n");
	fwrite ($socket, "Host: $host\n");
	fwrite ($socket, "Connection: close\n\n");
	$bufer = "";
	while (! feof ($socket)) {
		$bufer .= fread ($socket, 4096);
	}
	fclose ($socket);
	$bufer = preg_replace ('/^.*?(\\r?\\n){2}/s', '', $bufer);
	return $bufer;
}

function lib_eyeURL_doRequest($params) {
	if(!isset($params['host']) || !isset($params['path'])) {
		return false; //TODO: ERROR HANDLER
	}
	
	$host = $params['host'];
	$path = $params['path'];
	
	$data = "";
	if(isset($params['data']) && is_array($params['data'])) {
		foreach($params['data'] as $key=>$value) {
			$data .= urlencode($key).'='.urlencode($value).'&';
		}
		$data = substr($data,0,strlen($data)-1);
	}
	
	if(!isset($params['port'])) {
		$port = 80;
	} else {
		$port = $params['port'];
	}
	
	if(!isset($params['maxsize'])) {
		$max_size = MAX_READ_SIZE;
	} else {
		$max_size = intval($params['maxsize']);
	}
	
	if($max_size < 0) {
		$max_size = MAX_READ_SIZE;
	}
	
	if(!isset($params['method'])) {
		$method = 'GET';
	} else {
		$method = strtoupper($params['method']);
	}
	
	if ($method == "GET") {
		if(!empty($data)) {
		$path.= '?'.$data;
		}
	}   
	
	$filePointer = fsockopen($host, 80, $errorNumber, $errorString);
	
	if (!$filePointer){
		return false; //TODO: ERROR HANDLER
	}
	
	$requestHeader = $method." ".$path."  HTTP/1.1\r\n";
	$requestHeader.= "Host: ".$host."\r\n";
	$requestHeader.= "User-Agent: ".EYEOS_USER_AGENT."\r\n";
	$requestHeader.= "Accept-Encoding: \r\n";
	
	if ($method == "POST") {
		$requestHeader.= "Content-Type: application/x-www-form-urlencoded\r\n";
		$requestHeader.= "Content-Length: ".strlen($data)."\r\n";
	}
	
	$requestHeader.= "Connection: close\r\n\r\n";
	
	if ($method == "POST") {
		$requestHeader.= $data;
	}           
	
	fwrite($filePointer, $requestHeader);
	
	$responseHeader = '';
	$responseContent = '';
	$counter = 0;
	do {
		$responseHeader.= fread($filePointer, 1);
		if($counter > $max_size) {
			return false;
		}
		$counter++;
	} while (!preg_match('/\\r\\n\\r\\n$/', $responseHeader));
	
	$errorCodes = explode(" ",$responseHeader);
	if($errorCodes[1] != "200") {
		return false;
	}
	
	while (!feof($filePointer)) {
		if($counter > $max_size) {
			return $responseContent;
		}
		$responseContent.= fgets($filePointer, 128);
		$counter += 128;
	}
	
	return chop($responseContent);
}

?>