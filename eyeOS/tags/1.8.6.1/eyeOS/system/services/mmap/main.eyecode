<?php
/*
                                  ____   _____
                                 / __ \ / ____|
                  ___ _   _  ___| |  | | (___
                 / _ \ | | |/ _ \ |  | |\___ \
                |  __/ |_| |  __/ |__| |____) |
                 \___|\__, |\___|\____/|_____/
                       __/ |
                      |___/              1.8

                     Web Operating System
                           eyeOS.org

             eyeOS Engineering Team - www.eyeos.org/team

     eyeOS is released under the GNU Affero General Public License Version 3 (AGPL3)
            provided with this release in license.txt
             or via web at gnu.org/licenses/agpl-3.0.txt

        Copyright 2005-2009 eyeOS Team (team@eyeos.org)
*/

/*
	Message Map eyeOS service
*/

/**
* Adds a new task to the Buffer.
* 
* @param $params array(content)
* @param $content XML string containing the task.
* @return If the function succeeds, returns true. Otherwise, returns
*	false.
* @exception INCORRECT_PARAMS No task is provided.
* @date 2008/03/11
*/
function service_mmap_addToBuffer($params) {
	if(!$params[0]) {
		reqLib('errorCodes','setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	global $outputBuffer;
	$content = $params[0];	
	$outputBuffer .= $content;
	return true;
}

/**
* Returns the contents of the output buffer.
* 
* @return Returns an XML string containing the output buffer.
* @date 2008/03/11
*/
function service_mmap_releaseBuffer() {
	//this function release output buffer
	global $outputBuffer;

	//get possible PHP errors
	$content = ob_get_contents();
	
	if(!empty($content)) {
	  $line = base64_encode($content);
	  eyeX('rawjs',array('js'=>'console.log(Base64.decode("'.$line.'"));'));
	}

	//flush output buffer if needed
	ob_clean();

	//Making the xml response.
	$temp = eyeXML('append',array('eyeMessage',$outputBuffer));
	$temp = eyeXML('getXmlHeader').$temp;
	return $temp;
}

/**
* Calls an event function of an application. This function is
* automatically called every time an application sends a signal from a
* user's client.
* 
* @param $params array(checknum,action,[args])
* @param $checknum Checknum of the application executing the action.
* @param $action Name of the event.
* @param $args Arguments passed to the function.
* @return The output buffer of the system, updated.
* @date 2008/03/11
*/
function service_mmap_routemsg($params) {
	if(!$params[0] || !$params[1]) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	global $checknum;
	global $currentUser;
	global $myPid;
	
	$checknum = $params[0];
	$action = $params[1];
	$args = $params[2];

	if($args) {		
		$args = eyeXML('xml2array',array($args));
	}	
	global $procInfo;
	$procInfo = proc('getProcByChecknum',array($checknum));
			
	$currentUser = $procInfo['currentUser'];
	$myPid = $procInfo['pid'];
	
	$procInfo['checknum'] = $checknum;//Remove this? maybe 
	
	if(!isset($_SESSION['AUTH_IP']) || empty($_SESSION['AUTH_IP'])) {
		$_SESSION['AUTH_IP'] = $_SERVER['REMOTE_ADDR'];
	} else {
		if(($_SESSION['AUTH_IP'] != $_SERVER['REMOTE_ADDR']) && sec('protectedIpSessions')) {
			eyeSessions('endSession'); //delete session
			eyeX('messageBox',array('content'=>'Your session has expired','type'=>2));
			eyeX('rawjs',array('js'=>'location.reload();')); //refresh the page
			return mmap('releaseBuffer');
		}
	}
	
	//If app does not exist...
	if(!isset($procInfo['appName']) || empty($procInfo['appName'])) {
		exit;
	} 
	unset($messageTable);
	
	if(um('UserIsAdmin',array($currentUser))) {
		define('ROOTUSER',$currentUser);
	} else {
		define('ROOTUSER',REAL_ROOTUSER);
	}
	
	$version = CACHE_VERSION;
	$config = eyeXML('getXMLconfig',array('eyex','eyex.xml'));
	if ($config && $config['changes'][0]['times'][0]) {
		$version += $config['changes'][0]['times'][0];
	}
	define('EXTERN_CACHE_VERSION',$version);
	
	//If events.eyecode can be included, then include it, else exit.
	if(is_readable(EYE_ROOT.'/'.APP_DIR.'/'.$procInfo['appName'].'/'.'events'.EYE_CODE_EXTENSION)) {
		include_once(EYE_ROOT.'/'.APP_DIR.'/'.$procInfo['appName'].'/'.'events'.EYE_CODE_EXTENSION);
	} else {
	
		exit;
	}
	
	global $outputBuffer;
	$outputBuffer = "";
	i18n('loadLang',array($procInfo['appName']));
	//First call on_Message event if it exists (for example for friends).
	if(function_exists($procInfo['appName'].'_on_Message')) {
		call_user_func($procInfo['appName'].'_on_Message',$args);
	} else {
		reqLib('eyeWidgets','updateContent',$args);
	}
	
	if(isset($messageTable[$action])) {
		call_user_func($messageTable[$action]['function'],$messageTable[$action]['args']);
	} else {
		//Call the specific event.
		if(function_exists($procInfo['appName'].'_on_'.$action)) {
			call_user_func($procInfo['appName'].'_on_'.$action,$args);
		} else {
			exit;
		}
	}

	return mmap('releaseBuffer');
}

/**
* Transforms a PHP array into string convertible to a JavaScript array.
* 
* @param $params array(arrayinphp)
* @param $arrayinphp PHP array to transform.
* @return If the function succeeds, returns true. Otherwise, returns
*	false.
* @exception INCORRECT_PARAMS No array is provided.
* @date 2008/03/11
*/
function service_mmap_array2js($params) {
	if(!$params[0]) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}	
	$arrayInPHP = $params[0];
	$code = json_encode($arrayInPHP);
	return $code;
}

/**
* Transforms a PHP array into string convertible to a JS array with the
* use of the JS function getArrayArg.
* 
* @param $params array(arrayinphp)
* @param $arrayinphp Input PHP array.
* @return If the function succeeds, returns true. Otherwise, returns
*	false.
* @exception INCORRECT_PARAMS No array is provided.
* @date 2008/03/11
*/
function service_mmap_array2jsArg($params) {
	if(!$params[0]) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}	
	$arrayInPHP = $params[0];
	$code = '';
	foreach ($arrayInPHP as $value) {
		if (!is_null($value)) {
			if (!$params[1]) {
				$value = str_replace("\\","\\\\",$value);
				$value = str_replace('"','\\"',$value);
				$value = str_replace("'","\\'",$value);
			}
			$code .= $value.'""';
		}
	}
	$code = utf8_substr($code,0,utf8_strlen($code)-2);
	return $code;
}
?>
