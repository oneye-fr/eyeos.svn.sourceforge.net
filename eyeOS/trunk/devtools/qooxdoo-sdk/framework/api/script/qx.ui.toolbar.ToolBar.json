{"attributes": {"name": "ToolBar", "packageName": "qx.ui.toolbar", "mixins": "qx.ui.core.MChildrenHandling", "superClass": "qx.ui.core.Widget", "childClasses": "qx.ui.menubar.MenuBar", "fullName": "qx.ui.toolbar.ToolBar", "type": "class"}, "type": "class", "children": [{"attributes": {"text": "<p>The Toolbar class is the main part of the toolbar widget.</p>\n\n<p>It can handle added {@link Button}s, {@link CheckBox}es, {@link RadioButton}s\nand {@link Separator}s in its {@link #add} method. The {@link #addSpacer} method\nadds a spacer at the current toolbar position. This means that the widgets\nadded after the method call of {@link #addSpacer} are aligned to the right of\nthe toolbar.</p>\n\n<p>For more details on the documentation of the toolbar widget, take a look at the\ndocumentation of the {@link qx.ui.toolbar}-Package.</p>"}, "type": "desc"}, {"type": "constructor", "children": [{"attributes": {"docFrom": "qx.core.Object", "overriddenFrom": "qx.ui.core.Widget", "isCtor": true, "name": "ctor"}, "type": "method"}]}, {"type": "events", "children": [{"attributes": {"name": "changeOpenMenu"}, "type": "event", "children": [{"attributes": {"text": "Fired on change of the property {@link #openMenu}."}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.event.type.Data"}, "type": "entry"}]}]}, {"attributes": {"name": "changeShow"}, "type": "event", "children": [{"attributes": {"text": "Fired on change of the property {@link #show}."}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.event.type.Data"}, "type": "entry"}]}]}, {"attributes": {"name": "hideItem"}, "type": "event", "children": [{"attributes": {"text": "<p>Fired if an item will be hidden by the {@link #overflowHandling}.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.event.type.Data"}, "type": "entry"}]}]}, {"attributes": {"name": "showItem"}, "type": "event", "children": [{"attributes": {"text": "<p>Fired if an item will be show by the {@link #overflowHandling}.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.event.type.Data"}, "type": "entry"}]}]}]}, {"type": "methods", "children": [{"attributes": {"access": "private", "name": "__hideChild"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "child"}, "type": "param", "children": [{"attributes": {"text": "<p>The widget to exclude.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.ui.core.Widget"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Helper to exclude a toolbar item.</p>"}, "type": "desc"}]}, {"attributes": {"access": "private", "name": "__showChild"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "child"}, "type": "param", "children": [{"attributes": {"text": "<p>The widget to show.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.ui.core.Widget"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Helper to show a toolbar item.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "apply": "qx.ui.toolbar.ToolBar#overflowHandling", "name": "_applyOverflowHandling"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>new value of the property</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}, {"attributes": {"name": "old"}, "type": "param", "children": [{"attributes": {"text": "<p>previous value of the property (null if it was not yet set).</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Applies changes of the property value of the property <code>overflowHandling</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowHandling}.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "apply": "qx.ui.toolbar.ToolBar#overflowIndicator", "name": "_applyOverflowIndicator"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>new value of the property</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.ui.core.Widget"}, "type": "entry"}]}]}, {"attributes": {"name": "old"}, "type": "param", "children": [{"attributes": {"text": "<p>previous value of the property (null if it was not yet set).</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.ui.core.Widget"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Applies changes of the property value of the property <code>overflowIndicator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowIndicator}.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "apply": "qx.ui.toolbar.ToolBar#spacing", "name": "_applySpacing"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>new value of the property</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "old"}, "type": "param", "children": [{"attributes": {"text": "<p>previous value of the property (null if it was not yet set).</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Applies changes of the property value of the property <code>spacing</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "docFrom": "qx.ui.core.LayoutItem", "overriddenFrom": "qx.ui.core.Widget", "name": "_computeSizeHint"}, "type": "method"}, {"attributes": {"access": "protected", "name": "_getNextToHide"}, "type": "method", "children": [{"attributes": {"text": "<p>Responsible for returning the next item to remove. In It checks the\npriorities added by {@link #setRemovePriority}. If all priorized widgets\nalready excluded, it takes the widget added at last.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The widget which should be removed next.\n  If null is returned, no widget is availablew to remove.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.ui.core.Widget"}, "type": "entry"}, {"attributes": {"type": "null"}, "type": "entry"}]}]}]}, {"attributes": {"access": "internal", "isInternal": true, "name": "_isAllowMenuOpenHover"}, "type": "method", "children": [{"attributes": {"text": "<p>Return if a menu could be opened on hover or not.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<code>true</code> if a menu could be opened,\n   <code>false</code> otherwise."}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "_onResize"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "e"}, "type": "param", "children": [{"attributes": {"text": "<p>The resize event.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.event.type.Data"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Resize event handler.</p>"}, "type": "desc"}]}, {"attributes": {"access": "protected", "name": "_recalculateOverflow"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "width"}, "type": "param", "children": [{"attributes": {"text": "<p>The available width.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Responsible for calculation the overflow based on the available width.</p>"}, "type": "desc"}]}, {"attributes": {"access": "internal", "isInternal": true, "name": "_setAllowMenuOpenHover"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<code>true</code> if a menu could be opened,\n   <code>false</code> otherwise."}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Indicate if a menu could be opened on hover or not.</p>"}, "type": "desc"}]}, {"attributes": {"name": "addSeparator"}, "type": "method", "children": [{"attributes": {"text": "<p>Adds a separator to the toolbar.</p>"}, "type": "desc"}]}, {"attributes": {"name": "addSpacer"}, "type": "method", "children": [{"attributes": {"text": "<p>Add a spacer to the toolbar. The spacer has a flex\nvalue of one and will stretch to the available space.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The newly added spacer object. A reference\n  to the spacer is needed to remove this spacer from the layout.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.ui.core.Spacer"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getMenuButtons"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns all nested buttons which contains a menu to show. This is mainly\nused for keyboard support.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>List of all menu buttons</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Array"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getOpenMenu", "fromProperty": "openMenu"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>openMenu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openMenu}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>openMenu</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getOverflowHandling", "fromProperty": "overflowHandling"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>overflowHandling</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowHandling}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>overflowHandling</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getOverflowIndicator", "fromProperty": "overflowIndicator"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>overflowIndicator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowIndicator}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>overflowIndicator</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getShow", "fromProperty": "show"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>show</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>show</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "getSpacing", "fromProperty": "spacing"}, "type": "method", "children": [{"attributes": {"text": "<p>Returns the (computed) value of the property <code>spacing</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>(Computed) value of <code>spacing</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initOpenMenu", "fromProperty": "openMenu"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>openMenu</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>openMenu</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #openMenu}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initOverflowHandling", "fromProperty": "overflowHandling"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>overflowHandling</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>overflowHandling</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowHandling}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initOverflowIndicator", "fromProperty": "overflowIndicator"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>overflowIndicator</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>overflowIndicator</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowIndicator}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initShow", "fromProperty": "show"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>show</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>show</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"access": "protected", "name": "initSpacing", "fromProperty": "spacing"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>Initial value for property <code>spacing</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Calls the apply method and dispatches the change event of the property <code>spacing</code>\nwith the default value defined by the class developer. This function can\nonly be called from the constructor of a class.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the default value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "isOverflowHandling", "fromProperty": "overflowHandling"}, "type": "method", "children": [{"attributes": {"text": "<p>Check whether the (computed) value of the boolean property <code>overflowHandling</code> equals <code>true</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowHandling}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>Whether the property equals <code>true</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"name": "resetOpenMenu", "fromProperty": "openMenu"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>openMenu</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #openMenu}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "resetOverflowHandling", "fromProperty": "overflowHandling"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>overflowHandling</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowHandling}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "resetOverflowIndicator", "fromProperty": "overflowIndicator"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>overflowIndicator</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowIndicator}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "resetShow", "fromProperty": "show"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>show</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "resetSpacing", "fromProperty": "spacing"}, "type": "method", "children": [{"attributes": {"text": "<p>Resets the user value of the property <code>spacing</code>.</p>\n\n<p>The computed value falls back to the next available value e.g. appearance, init or\ninheritance value depeneding on the property configuration and value availability.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"type": "types", "children": [{"attributes": {"type": "void"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setOpenMenu", "fromProperty": "openMenu"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>openMenu</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>openMenu</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #openMenu}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setOverflowHandling", "fromProperty": "overflowHandling"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>overflowHandling</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>overflowHandling</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowHandling}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setOverflowIndicator", "fromProperty": "overflowIndicator"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>overflowIndicator</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>overflowIndicator</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowIndicator}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setRemovePriority"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "item"}, "type": "param", "children": [{"attributes": {"text": "<p>The item to give the priority.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "qx.ui.core.Widget"}, "type": "entry"}]}]}, {"attributes": {"name": "priority"}, "type": "param", "children": [{"attributes": {"text": "<p>The priority, higher means removed earlier.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Integer"}, "type": "entry"}]}]}, {"attributes": {"name": "override"}, "type": "param", "children": [{"attributes": {"text": "<p>true, if the priority should be overridden.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>The removal of the toolbar items is priority based. You can change these\npriorities with this method. The higer a priority, the earlier is will\nbe excluded. Remmeber to use every priority only once! If you want\noverride an already set priority, use the override parameter.\nKeep in mind to only use already added items.</p>"}, "type": "desc"}]}, {"attributes": {"name": "setShow", "fromProperty": "show"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>show</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>show</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #show}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "setSpacing", "fromProperty": "spacing"}, "type": "method", "children": [{"type": "params", "children": [{"attributes": {"name": "value"}, "type": "param", "children": [{"attributes": {"text": "<p>New value for property <code>spacing</code>.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"text": "<p>Sets the user value of the property <code>spacing</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #spacing}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>The unmodified incoming value.</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "var"}, "type": "entry"}]}]}]}, {"attributes": {"name": "toggleOverflowHandling", "fromProperty": "overflowHandling"}, "type": "method", "children": [{"attributes": {"text": "<p>Toggles the (computed) value of the boolean property <code>overflowHandling</code>.</p>\n\n<p>For further details take a look at the property definition: {@link #overflowHandling}.</p>"}, "type": "desc"}, {"type": "return", "children": [{"attributes": {"text": "<p>the new value</p>"}, "type": "desc"}, {"type": "types", "children": [{"attributes": {"type": "Boolean"}, "type": "entry"}]}]}]}]}, {"type": "properties", "children": [{"attributes": {"defaultValue": "\"toolbar\"", "propertyType": "new", "overriddenFrom": "qx.ui.core.Widget", "refine": "true", "name": "appearance"}, "type": "property", "children": [{"attributes": {"text": "<p>Appearance of the widget</p>"}, "type": "desc"}]}, {"attributes": {"allowNull": "true", "propertyType": "new", "event": "changeOpenMenu", "name": "openMenu", "check": "qx.ui.menu.Menu"}, "type": "property", "children": [{"attributes": {"text": "<p>Holds the currently open menu (when the toolbar is used for menus)</p>"}, "type": "desc"}]}, {"attributes": {"apply": "_applyOverflowHandling", "defaultValue": "false", "propertyType": "new", "check": "Boolean", "name": "overflowHandling"}, "type": "property", "children": [{"attributes": {"text": "<p>Enables the overflow handling which automatically removes items.</p>"}, "type": "desc"}]}, {"attributes": {"allowNull": "true", "propertyType": "new", "check": "qx.ui.core.Widget", "name": "overflowIndicator", "apply": "_applyOverflowIndicator"}, "type": "property", "children": [{"attributes": {"text": "<p>Widget which will be shown if at least one toolbar item is hidden.\nKeep in mind to add this widget to the toolbar before you set it as\nindicator!</p>"}, "type": "desc"}]}, {"attributes": {"name": "show", "defaultValue": "\"both\"", "inheritable": "true", "propertyType": "new", "possibleValues": "\"both\",\"label\",\"icon\"", "event": "changeShow"}, "type": "property", "children": [{"attributes": {"text": "<p>Whether icons, labels, both or none should be shown.</p>"}, "type": "desc"}]}, {"attributes": {"name": "spacing", "allowNull": "true", "propertyType": "new", "apply": "_applySpacing", "check": "Integer", "themeable": "true"}, "type": "property", "children": [{"attributes": {"text": "<p>The spacing between every child of the toolbar</p>"}, "type": "desc"}]}]}]}